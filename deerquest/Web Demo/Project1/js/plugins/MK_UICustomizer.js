/*:
 * @target MZ
 * @author Aerosys
 * @plugindesc [Version 1.5.0] [MV & MZ]
 * 
 * @help
 * 
 * ----------------------------------------------------------------------------
 * Start
 * ----------------------------------------------------------------------------
 * 
 * - Start Game
 * - Open In Game Menu
 * - Press F9 to open the tool
 * 
 * 
 * ----------------------------------------------------------------------------
 * Can no longer access the tool - what now?
 * ----------------------------------------------------------------------------
 * 
 * If your game crashes before you are able to open the tool, you can reset
 * this plugin by deleting the
 * 
 * "uicustom"
 * 
 * folder from your game project's directory. The plugin will automatically
 * recreate the folder and files when you start the game again.
 * 
 * 
 * ----------------------------------------------------------------------------
 * Tier?
 * ----------------------------------------------------------------------------
 * 
 * This Plugin has no Tier?
 * Yes, unlike other MK plugins, this one has no tier assigned. You need to
 * find out where to position this plugin in the list by yourself.
 * 
 * 
 * ----------------------------------------------------------------------------
 * Rules
 * ----------------------------------------------------------------------------
 * 
 * 1. This Plugin is provided free of charge and may be used in any
 *    game project.
 * 
 * 2. You may not redistribute, sell, or make this Plugin available on any
 *    website, platform, or any other distribution channel on a standalone
 *    basis. You may also not claim the Plugin as your own.
 * 
 * 3. You may modify this Plugin to suit your needs, but Rule 2 also applies
 *    for modified versions of this Plugin.
 * 
 * 4. You may create a Plugin that requires this Plugin to function, but you
 *    may not redistribute, sell, or make your Plugin available on any website,
 *    platform, or any other distribution channel on a standalone basis, even
 *    if it is not a direct violation of Rule 2. Your Plugin can only be
 *    shipped as part of your game.
 * 
 * 5. You may send this Plugin to another person when you hire them for
 *    personal modifications.
 * 
 * 6. When multiple people work on the project, purchasing a license for every
 *    team member is not required.
 * 
 * 
 * @endofhelp
 * 
 * @command setMenuPortrait
 * @text Set Actor Menu Portrait
 * @desc Sets the menu portrait for the specified Actor.
 * 
 * @arg actorId
 * @text Actor
 * @type actor
 * @default 1
 * 
 * @arg pictureName
 * @text Picture Name
 * @type file
 * @dir img/pictures/
 * 
 * 
 * @command resetMenuPortrait
 * @text Reset Actor Menu Portrait
 * 
 * @arg actorId
 * @text Actor
 * @type actor
 * @default 1
 * 
 * 
 * @param menuOptions
 * @text Menu Options
 * 
 * @param overrideMenuCommands
 * @parent menuOptions
 * @text Use custom Menu Commands?
 * @type boolean
 * @default true
 * @desc When true, this plugin will override the menu commands. When false, only Icons are read and that's it.
 * 
 * @param menuCommands
 * @parent menuOptions
 * @text Menu Commands
 * @type struct<MenuCommand>[]
 * @default ["{\"symbol\":\"item\",\"iconIndex\":\"176\",\"text\":\"Items\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('item')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"at least 1 Party Member?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Jump to...\",\"destination\":\"Scene_Item\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}","{\"symbol\":\"skill\",\"iconIndex\":\"79\",\"text\":\"Skills\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('skill')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"at least 1 Party Member?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Jump to...\",\"destination\":\"Scene_Skill\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"true\"}","{\"symbol\":\"equip\",\"iconIndex\":\"96\",\"text\":\"Equip\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('equip')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"at least 1 Party Member?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Jump to...\",\"destination\":\"Scene_Equip\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"true\"}","{\"symbol\":\"status\",\"iconIndex\":\"189\",\"text\":\"Status\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('status')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"at least 1 Party Member?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Jump to...\",\"destination\":\"Scene_Status\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"true\"}","{\"symbol\":\"formation\",\"iconIndex\":\"75\",\"text\":\"Formation\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('formation')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"is Formation allowed?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Formation Mode\",\"destination\":\"\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}","{\"symbol\":\"options\",\"iconIndex\":\"83\",\"text\":\"Options\",\"showCondition\":\"\",\"enableCondition\":\"\",\"action\":\"Jump to...\",\"destination\":\"Scene_Options\",\"commonEvent\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}","{\"symbol\":\"save\",\"iconIndex\":\"245\",\"text\":\"Save\",\"showCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"$dataSystem.menuCommands[[\\\\\\\"item\\\\\\\",\\\\\\\"skill\\\\\\\",\\\\\\\"equip\\\\\\\",\\\\\\\"status\\\\\\\",\\\\\\\"formation\\\\\\\",\\\\\\\"save\\\\\\\"].indexOf('save')]\\\"}\",\"enableCondition\":\"{\\\"switchId\\\":\\\"\\\",\\\"misc\\\":\\\"is Save allowed?\\\",\\\"pluginName\\\":\\\"\\\",\\\"customEval\\\":\\\"\\\"}\",\"action\":\"Jump to...\",\"destination\":\"Scene_Save\",\"commonEventId\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}","{\"symbol\":\"load\",\"iconIndex\":\"245\",\"text\":\"Load Game\",\"showCondition\":\"\",\"enableCondition\":\"\",\"action\":\"Jump to...\",\"destination\":\"Scene_Load\",\"commonEvent\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}","{\"symbol\":\"gameEnd\",\"iconIndex\":\"74\",\"text\":\"Quit\",\"showCondition\":\"\",\"enableCondition\":\"\",\"action\":\"Jump to...\",\"destination\":\"Scene_GameEnd\",\"commonEvent\":\"\",\"actionCustomCode\":\"\",\"isPersonal\":\"false\"}"]
 * 
 * @param a
 * @text _
 * 
 * @param gameplay
 * @text Gameplay
 * 
 * @param skipActorSelection
 * @parent gameplay
 * @text Skip Actor Selection when single Actor?
 * @type boolean
 * @default true
 * 
 * @param b
 * @text _
 * 
 * @param misc
 * @text Miscellaneous
 * 
 * @param showNews
 * @parent misc
 * @text Show News on Start?
 * @type boolean
 * @default true
 * 
 */

/*~struct~MenuCommand:
 *
 * @param symbol
 * @text symbol
 * @default REQUIRED
 * @desc Unique text value. Usually something like: item, equip, skill, ...
 * 
 * @param iconIndex
 * @text Icon
 * @type icon
 * @default 16
 * 
 * @param text
 * @text Text
 * @default REQUIRED
 * 
 * @param showCondition
 * @text Show when...
 * @type struct<Condition>
 * @desc Just like Event Tabs, ALL conditions must be either blank or truthy
 * 
 * @param enableCondition
 * @text Enable when...
 * @type struct<Condition>
 * @desc Just like Event Tabs, ALL conditions must be either blank or truthy
 * 
 * @param action
 * @text Action
 * @type select
 * @option Jump to...
 * @option Formation Mode
 * @option Common Event
 * @option Custom Code
 * @default Jump to...
 * 
 * @param destination
 * @parent action
 * @text when Jump to: next Scene
 * @type combo
 * @option Scene_Item
 * @option Scene_Skill
 * @option Scene_Equip
 * @option Scene_Status
 * @option Scene_Options
 * @option Scene_Save
 * @option Scene_Load
 * @option Scene_GameEnd
 * 
 * @param commonEventId
 * @parent action
 * @text when Common Event:
 * @type common_event
 * 
 * @param actionCustomCode
 * @parent action
 * @text when Custom Code:
 * 
 * @param isPersonal
 * @text Is Personal?
 * @type boolean
 * @default false
 * 
 */

/*~struct~Condition:
 *
 * @param switchId
 * @text Switch?
 * @type switch
 * @desc When selection, this Switch must be ON
 * 
 * @param misc
 * @text Game Info
 * @type select
 * @option at least 1 Party Member?
 * @option is Formation allowed?
 * @option is Save allowed?
 * @option _
 * 
 * @param pluginName
 * @text Plugin?
 * @desc When selection, this Plugin must be active
 * 
 * @param customEval
 * @text Custom Code
 * @desc Custom JavaScript code that must return true
 * 
 */

/*~struct~ActorParameter:
 *
 * @param name
 * @text Name
 * 
 * @param abbreviation
 * @text Abbreviation
 * 
 * @param iconIndex
 * @text Icon
 * @type icon
 * 
 */


var Imported = Imported || { };
Imported.MK_UICustomizer = '1.5.0';

if ('MV' == Utils.RPGMAKER_NAME) {

// =====================================================================================
// MV Support
// =====================================================================================

ImageManager.iconWidth      = Window_Base._iconWidth;
ImageManager.iconHeight     = Window_Base._iconHeight;
ImageManager.faceWidth      = Window_Base._faceWidth;
ImageManager.faceHeight     = Window_Base._faceHeight;

Utils.extractFileName = function(filename) {
    return filename.split('/').pop();
}

Scene_Base.prototype.calcWindowHeight = function(numLines, selectable) {
    return selectable
        ? Window_Selectable.prototype.fittingHeight(numLines)
        : Window_Base.prototype.fittingHeight(numLines);
}

Scene_MenuBase.prototype.helpWindowRect = function() {
    return new Rectangle(
        0,
        this.helpAreaTop(),
        Graphics.boxWidth,
        this.helpAreaHeight(),
    );
}

const _WindowHelp_initialize = Window_Help.prototype.initialize;
Window_Help.prototype.initialize = function(arg) {

    if (isRectangle(arg)) {
        Window_Base.prototype.initialize.call(
            this,
            arg.x,
            arg.y,
            arg.width,
            arg.height,
        );
        this._text = '';
    }
    else {
        _WindowHelp_initialize.apply(this, arguments);
    }
}

const _WindowSelectable_initialize = Window_Selectable.prototype.initialize;
Window_Selectable.prototype.initialize = function(arg) {

    if (isRectangle(arg)) {
        _WindowSelectable_initialize.call(
            this,
            arg.x,
            arg.y,
            arg.width,
            arg.height,
        );
    }
    else {
        _WindowSelectable_initialize.apply(this, arguments);
    }
}

const _WindowMenuCommand_initialize = Window_MenuCommand.prototype.initialize;
Window_MenuCommand.prototype.initialize = function(arg1) {

    _WindowMenuCommand_initialize.call(
        this,
        isRectangle(arg1)
            ? arg1
            : SceneManager._scene.commandWindowRect()
    );
}

// Override
Scene_Menu.prototype.createStatusWindow = function() {
    const rectangle = this.statusWindowRect();
    this._statusWindow = new Window_MenuStatus(rectangle);
    this._statusWindow.reserveFaceImages();
    this.addWindow(this._statusWindow);
}

const _WindowMenuStatus_initialize = Window_MenuStatus.prototype.initialize;
Window_MenuStatus.prototype.initialize = function(arg1) {

    if (isRectangle(arg1)) {
        Window_Selectable.prototype.initialize.call(this, arg1);
        
        this._formationMode = false;
        this._pendingIndex = -1;
        this.refresh();
    } else {
        _WindowMenuStatus_initialize.apply(this, arguments);
    }
}

function isRectangle(object) {
    return (
        typeof object === 'object' &&
        'x' in object       && 'y' in object &&
        'width' in object   && 'height' in object
    );
}

Scene_MenuBase.prototype.isBottomHelpMode = function() {
    return true;
}

Scene_MenuBase.prototype.helpAreaTop = function() {
    if (this.isBottomHelpMode()) {
        return this.mainAreaBottom();
    } else {
        return 0;
    }
}

Scene_MenuBase.prototype.helpAreaBottom = function() {
    return this.helpAreaTop() + this.helpAreaHeight();
}

Scene_MenuBase.prototype.helpAreaHeight = function() {
    return this.calcWindowHeight(2);
}

Scene_MenuBase.prototype.mainAreaHeight = function() {
    return Graphics.boxHeight - this.helpAreaHeight();
}

Scene_MenuBase.prototype.mainAreaTop = function() {
    if (this.isBottomHelpMode()) {
        return 0;
    } else {
        return this.helpAreaBottom();
    }
}

Scene_MenuBase.prototype.mainAreaBottom = function() {
    return this.mainAreaTop() + this.mainAreaHeight();
}


// =====================================================================================
// Windows General
// =====================================================================================

Window_Base.prototype.itemPadding = function() {
    return 8;
}

Window_Selectable.prototype.itemRectWithPadding = function(index) {
    const rect = this.itemRect(index);
    const padding = this.itemPadding();
    rect.x += padding;
    rect.width -= padding * 2;
    return rect;
}

Window_Selectable.prototype.itemLineRect = function(index) {
    return this.itemRectForText(index);
}

Window_Base.prototype.textSizeEx = function(text) {
    const textState = {
        text: this.convertEscapeCharacters(text),
        index: 0,
    };

    return {
        width: this.drawTextEx(text, 0, this.contents.height),
        height: this.calcTextHeight(textState),
    };
}


// =====================================================================================
// Colors
// =====================================================================================

var ColorManager = ColorManager || { };

const colors = [ ];
let pendingColor;

const windowskin = ImageManager.loadSystem('Window');
windowskin.addLoadListener(() => {
    for (let i = 0; i < 32; i++) {
        const x = 96 + (i % 8) * 12 + 6;
        const y = 144 + Math.floor(i / 8) * 12 + 6;
        colors[i] = windowskin.getPixel(x, y);
    }
    pendingColor = windowskin.getPixel(120, 120);
});


ColorManager.textColor          = function(i) { return colors[i] || '#FFFFFF'; }
ColorManager.pendingColor       = function() { return pendingColor; }
ColorManager.translucentOpacity = function() { return 160; }
ColorManager.dimColor1          = function() { return 'rgba(0, 0, 0, 0.6)'; }
ColorManager.dimColor2          = function() { return 'rgba(0, 0, 0, 0)'; }

Window_Base.prototype.normalColor           = function() { return ColorManager.textColor(0); };
Window_Base.prototype.systemColor           = function() { return ColorManager.textColor(16); };
Window_Base.prototype.crisisColor           = function() { return ColorManager.textColor(17); };
Window_Base.prototype.deathColor            = function() { return ColorManager.textColor(18); };
Window_Base.prototype.gaugeBackColor        = function() { return ColorManager.textColor(19); };
Window_Base.prototype.hpGaugeColor1         = function() { return ColorManager.textColor(20); };
Window_Base.prototype.hpGaugeColor2         = function() { return ColorManager.textColor(21); };
Window_Base.prototype.mpGaugeColor1         = function() { return ColorManager.textColor(22); };
Window_Base.prototype.mpGaugeColor2         = function() { return ColorManager.textColor(23); };
Window_Base.prototype.mpCostColor           = function() { return ColorManager.textColor(23); };
Window_Base.prototype.powerUpColor          = function() { return ColorManager.textColor(24); };
Window_Base.prototype.powerDownColor        = function() { return ColorManager.textColor(25); };
Window_Base.prototype.tpGaugeColor1         = function() { return ColorManager.textColor(28); };
Window_Base.prototype.tpGaugeColor2         = function() { return ColorManager.textColor(29); };
Window_Base.prototype.tpCostColor           = function() { return ColorManager.textColor(29); };
Window_Base.prototype.pendingColor          = function() { return ColorManager.pendingColor(); }
Window_Base.prototype.translucentOpacity    = function() { return ColorManager.translucentOpacity(); }
Window_Base.prototype.dimColor1             = function() { return ColorManager.dimColor1(); }
Window_Base.prototype.dimColor2             = function() { return ColorManager.dimColor2(); }

}

(function() {

const indexHtml = ""
const indexJs   = ""
const css       = "DQouY2FyZCB7DQogICAgbWFyZ2luLXRvcDogMXJlbTsNCn0NCg0KLmN1c3RvbS1jb2RlIHsNCiAgICAvKmJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Ki8NCiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlOyAvKiBNb25vc3BhY2UgZsO8ciBDb2RlICovDQp9DQoNCi5pbmZvIHsNCiAgICBjb2xvcjogIzg4ODg4ODsNCn0NCg0KLnJvdGF0ZS00NSB7DQogICAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOw0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCg0KLnJvdGF0ZS05MCB7DQogICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOw0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCg0KLnJvdGF0ZS0xMzUgew0KICAgIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZyk7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KfQ0KDQoucm90YXRlLTE4MCB7DQogICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQp9DQoNCi5yb3RhdGUtMjcwIHsNCiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyNzBkZWcpOw0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCg0KLmJpLWFycm93LTkwZGVnLWxlZnQgew0KICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZykgdHJhbnNsYXRlWSg1cHgpOw0KfQ0KDQouYXJyb3cgew0KICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzIGVhc2U7DQogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KfQ0KDQouY29sbGFwc2VkIC5hcnJvdyB7DQogICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsNCn0NCg0Kc2VsZWN0LmZvcm0tc2VsZWN0IHsNCiAgICB3aWR0aDogbWF4LWNvbnRlbnQ7DQp9DQoNCi50aXRsZS5iYWRnZS5saXRlLCAudGl0bGUuYmFkZ2UucHJvIHsNCiAgICBib3JkZXI6ICM4ODg4ODggMXB4IHNvbGlkOw0KICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTsNCiAgICBmb250LXN0eWxlOiBpdGFsaWM7DQogICAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7DQp9DQoNCi5sb2NrZWQgew0KICAgIGJvcmRlcjogI0ZGQzEwNyAxcHggc29saWQ7DQogICAgYm9yZGVyLXJhZGl1czogMC41cmVtOw0KICAgIGZvbnQtc3R5bGU6IGl0YWxpYzsNCiAgICBmb250LXdlaWdodDogbGlnaHRlcjsNCiAgICBwYWRkaW5nLWxlZnQ6IDFyZW07DQogICAgcGFkZGluZy1yaWdodDogMXJlbTsNCiAgICBtYXJnaW4tbGVmdDogMXJlbTsNCiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07DQp9DQo="
const jQuery    = ""
const bs53_1    = ""
const bs53_2    = ""



const PLUGIN_NAME = 'MK_UICustomizer';

const reject = (reason) => {
    const message = (
        "An error occurred in the Plugin %1: %2 " +
        "If the problem persists, contact the Plugin Creator."
    ).format(PLUGIN_NAME, reason);
    
    alert(message);
    throw Error(message);
}

const mapCustomValuesTryCatch = (f, arg, name, isRequired) => {
    if (!arg && isRequired) {
        reject((
            "The Plugin Parameter \"%1\" is missing. " +
            "Please check it in the Plugin Manager. It may help to re-install this Plugin (i.e.: remove, re-add)."
        ).format(name));
    }
    if (!arg) return;

    try {
        return f(arg);
    } catch (e) {
        reject((
            "The Plugin Parameter \"%1\" contains an error and could not be interpreted. " +
            "Please check it in the Plugin Manager. It may also help to re-install this Plugin (i.e.: remove, re-add). " +
            "Cause: \"%2\"."
        ).format(name, e));
    }
}

const parameterStructure = (serialized, parameterName, isRequired) => {
    return mapCustomValuesTryCatch(
        JSON.parse,
        serialized,
        parameterName,
        isRequired,
    );
}

const customFunction = (serialized, parameterName, isRequired) => {
    return mapCustomValuesTryCatch(
        arg => new Function(arg),
        serialized,
        parameterName,
        isRequired,
    );
}

const deserializeCondition = (serialized, showEnabledText, commandText) => {
    const object = parameterStructure(
        serialized,
        '%1 Condition in Menu Command %2'.format(showEnabledText, commandText),
    );

    if (object) {
        return {
            switchId:       Number(object.switchId),
            misc:           object.misc,
            pluginName:     object.pluginName,
            customEval:     object.customEval,
        }
    }
}

//if (Utils.RPGMAKER_NAME != 'MZ') {
//    alert("%1 is only compatible with RPG Maker MZ.".format(PLUGIN_NAME));
//}

function compareVersions(a, b) {
    if (typeof a !== 'string') return false;
    if (typeof b !== 'string') return false;

    for (let i = 0; i < 3; i++) {
        if (Number(a.split('.')[i]) > Number(b.split('.')[i])) {
            return true;
        }
        if (Number(a.split('.')[i]) < Number(b.split('.')[i])) {
            return false;
        }
    }
    return true;
}

function requireCoreCodeVersion(version) {
    if (!compareVersions(Utils.RPGMAKER_VERSION, version)) {
        reject((
            'This Plugin requires at least RPG Maker MZ version %1. ' +
            'In RPG Maker, please go to "Game" -> "Update Core Scripts".'
        ).format(version));
    }
}

if (!PluginManager._parameters[PLUGIN_NAME.toLowerCase()]) {
    reject(
        'This Plugin is not correctly installed. ' +
        'Please make sure it has the filename "%1.js" and is located in "your game/js/plugins" folder. '.format(PLUGIN_NAME) +
        'Subfolders are not allowed.'
    );
}

if ('MZ' == Utils.RPGMAKER_NAME) requireCoreCodeVersion('1.9.0');

const params = PluginManager.parameters(PLUGIN_NAME);
const overrideMenuCommands  = 'false' !== params.overrideMenuCommands;
const menuCommands          = JSON.parse(params.menuCommands || '[ ]')
                                .map(JSON.parse)
                                .map(command => ({
                                    symbol:             command.symbol,
                                    iconIndex:          Number(command.iconIndex),
                                    text:               command.text || '',
                                    showCondition:      deserializeCondition(command.showCondition, 'Show', command.text),
                                    enableCondition:    deserializeCondition(command.enableCondition, 'Enabled', command.text),
                                    action:             command.action,
                                    destination:        command.destination,
                                    commonEventId:      Number(command.commonEventId),
                                    actionCustomCode:   customFunction(
                                                            command.actionCustomCode,
                                                            'Action Custom Code in Menu Command %1'.format(command.text),
                                                        ),
                                    isPersonal:         'true' == command.isPersonal,
                                }));
const showNews = 'false' !== params.showNews;

const getTemplate = () => {
    return {
        nameX: -30,
        nameY: 10,
        classX: -10,
        classY: 10,
        levelX: -76,
        levelY: -10,
        hpGaugeX: -10,
        statusEffectsX: 190,
        shadowBoxX: 200,
        shadowBoxGradientPower: 100,
        
        gameInfoTextLeft: "\\I[190]\n\\I[314]",
        gameInfoTextRight: "\\}\\C[3]\\MN\n\\$ \\C[16]\\G",
        unknownMapName: "\\C[8]Unknown Region",
        gaugeColorHp1: "#A16207",
        gaugeColorHp2: "#F59E0B",
        gaugeColorHpCrisis1: "#991B1B",
        gaugeColorHpCrisis2: "#DC2626",
        gaugeColorMp1: "#1D4ED8",
        gaugeColorMp2: "#3B82F6",
        gaugeColorTp1: "#15803D",
        gaugeColorTp2: "#22C55E",
        gaugeColorAtb1: "#D980FA",
        gaugeColorAtb2: "#FDA7DF",
        gaugeColorExp1: '#888888',
        gaugeColorExp2: '#FFFFFF',
        gaugeColorExpMaxed1: '#FFC107',
        gaugeColorExpMaxed2: '#FFEB3B',
        gaugeBackgroundColorHp: '#222222',
        gaugeBackgroundColorHpCrisis: '#222222',
        gaugeBackgroundColorHpDead: '#440000',
        gaugeBackgroundColorMp: '#222222',
        gaugeBackgroundColorTp: '#222222',
        gaugeBackgroundColorAtb: '#222222',
        gaugeBackgroundColorExp: '#222222',
        gaugeBackgroundColorExpMaxed: '#222222',
    }
}

let config = getTemplate();
let lastUpdateTime;
let _requireRefresh = true;

const _SceneManager_isGameActive = SceneManager.isGameActive;
SceneManager.isGameActive = function() {
    return (
        _SceneManager_isGameActive.call(this) ||
        (isScene(Scene_Menu) && Utils.isNwjs() && Utils.isOptionValid("test"))
    );
}

const alias_SceneBoot_start = Scene_Boot.prototype.start;
Scene_Boot.prototype.start = function() {
    alias_SceneBoot_start.call(this);

    unpackUiTool();
    readConfigAndRefresh();
}

function unpackUiTool() {
    if (Utils.isNwjs() && Utils.isOptionValid('test')) {
        
        const fs = require('fs');

        const buildIndexJavaScript = () => {
            const content = Buffer
                .from(indexJs, 'base64')
                .toString()
                .replace(
                    "const RPGMAKER_NAME = 'MZ';",
                    "const RPGMAKER_NAME = '%1';".format(Utils.RPGMAKER_NAME),
                )
                .replace(
                    "const PLUGIN_VERSION = '';",
                    "const PLUGIN_VERSION = '%1';".format(Imported[PLUGIN_NAME]),
                )
                .replace(
                    "const SHOW_NEWS = true;",
                    "const SHOW_NEWS = %1;".format(showNews),
                )
                ;
            
            fs.writeFile('uicustom/index.js', content, () => { });
        }

        fs.mkdir('uicustom', () => {
            fs.writeFile('uicustom/index.html',                 Buffer.from(indexHtml,  'base64'), () => { });
            fs.writeFile('uicustom/index.css',                  Buffer.from(css,        'base64'), () => { });
            fs.writeFile('uicustom/jQuery.js',                  Buffer.from(jQuery,     'base64'), () => { });
            fs.writeFile('uicustom/bootstrap.min.css',          Buffer.from(bs53_1,     'base64'), () => { });
            fs.writeFile('uicustom/bootstrap.bundle.min.js',    Buffer.from(bs53_2,     'base64'), () => { });

            buildIndexJavaScript();
        });
    }
}

const alias_SceneMenu_update = Scene_Menu.prototype.update;
Scene_Menu.prototype.update = function() {
    alias_SceneMenu_update.call(this);

    if ($gameTemp.isPlaytest() && Input.isTriggered('debug')) {
        window.open('uicustom/index.html', '_blank');
    }

    if ($gameTemp.isPlaytest() && _requireRefresh) {
        loop();
    }
}

function loop() {
    _requireRefresh = false;

    const fs = require('fs');
    fs.stat('uicustom/config.json', (error, stats) => {
        if (stats) {
            const time = stats.mtime.getTime() / 1000;

            if (lastUpdateTime !== time) {
                lastUpdateTime = time;
                
                fs.readFile('uicustom/config.json', (error, data) => {
                    data && refresh(JSON.parse(data));
                });
            }
        }
        setTimeout(() => _requireRefresh = true, 100);
    });
}

function refresh(arg) {
    config = arg;

    updatePartyLeader();
    SceneManager.goto(Scene_Menu);
}

function updatePartyLeader() {
    const actor = $gameParty.leader();
    if (!actor) return;
    
    if (config.previewGaugeColor == 'regular') {
        actor.setHp(Math.floor(actor.mhp * 0.8));
        actor.setMp(Math.floor(actor.mmp * 0.8));
        actor.setTp(Math.floor(actor.maxTp() * 0.8));
        actor.changeLevel(1);
        actor.changeExp(Math.floor(actor.nextLevelExp() * 0.5));

        Sprite_Gauge.prototype.isValid = function() {
            return true;
        };
    }
    if (config.previewGaugeColor == 'crisis') {
        actor.setHp(Math.floor(actor.mhp * 0.2));
    }
    if (config.previewGaugeColor == 'dead') {
        actor.setHp(0);
    }
    if (config.previewGaugeColor == 'maxed') {
        actor.changeLevel(actor.maxLevel());
    }
}

function readConfigAndRefresh() {
    loadFileXhr(
        'uicustom/config.json',
        data => config = data,
    );
}

function loadFileXhr(url, onLoad) {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.overrideMimeType('application/json');
    xhr.onload = () => onLoad(JSON.parse(xhr.responseText));
    xhr.onerror = () => { };
    xhr.send();
}


const isScene = (scene) => SceneManager._scene instanceof scene;


// Override
Scene_Base.prototype.isRightInputMode = function() {
    return 'left' != config.commandInputMode;
}

// Override
Scene_Menu.prototype.commandWindowRect = function() {
    if (config.overrideCommandRectangle) {

        return new Rectangle(
            config.commandRectangle_x || 0,
            config.commandRectangle_y || 0,
            config.commandRectangle_width || 0,
            config.commandRectangle_height || 0,
        );
    }

    const calcCommandWindowHeight = (n) => (
        new Window_MenuCommand(new Rectangle(0, 0, 0, 0)).fittingHeight(n, true)
    );

    if ('none' == config.statusOrientation) {
        const n         = config.commandNumberOfLines ||
                            new Window_MenuCommand(new Rectangle(0, 0, 0, 0)).maxItems();
        const width     = this.mainCommandWidth();
        const height    = calcCommandWindowHeight(n);
        const x         = Graphics.boxWidth / 2 - width / 2;
        const y         = Graphics.boxHeight / 2 - height / 2;

        return new Rectangle(x, y, width, height);
    }
    if ('side' == config.commandOrientation || !config.commandOrientation) {
        const width         = this.mainCommandWidth();
        const height        = this.mainAreaHeight() - (showGameInfoWindow() ? this.goldWindowRect().height : 0);
        const x             = this.isRightInputMode() ? Graphics.boxWidth - width : 0;
        const y             = this.mainAreaTop ? this.mainAreaTop() : 0;
        
        return new Rectangle(x, y, width, height);
    }
    if ('top' == config.commandOrientation) {
        const n         = config.commandNumberOfLines || 2;
        const x         = 0;
        const y         = this.mainAreaTop ? this.mainAreaTop() : 0;
        const width     = Graphics.boxWidth;
        const height    = calcCommandWindowHeight(n);
        
        return new Rectangle(x, y, width, height);
    }
    if ('bottom' == config.commandOrientation) {
        const n         = config.commandNumberOfLines || 2;
        const width     = Graphics.boxWidth;
        const height    = calcCommandWindowHeight(n);
        const x         = 0;
        const y         = (showGameInfoWindow() ? this.goldWindowRect().y : Graphics.boxHeight) - height;
        
        return new Rectangle(x, y, width, height);
    }
}

Scene_Menu.prototype.helpAreaHeight = function() {
    return 0;
}

function showGameInfoWindow() {
    return config.showGoldWindow !== false;
}

// Override
Scene_Menu.prototype.statusWindowRect = function() {
    if (config.overrideStatusRectangle) {

        return new Rectangle(
            config.statusRectangle_x || 0,
            config.statusRectangle_y || 0,
            config.statusRectangle_width || 0,
            config.statusRectangle_height || 0,
        );
    }
    if ('top' == config.commandOrientation) {
        const x         = 0;
        const y         = this.commandWindowRect().y + this.commandWindowRect().height;
        const width     = Graphics.boxWidth;
        const height    = (showGameInfoWindow() ? this.goldWindowRect().y : Graphics.boxHeight) - y;

        return new Rectangle(x, y, width, height);
    }
    else if ('bottom' == config.commandOrientation) {
        const x         = 0;
        const y         = this.mainAreaTop ? this.mainAreaTop() : 0;
        const width     = Graphics.boxWidth;
        const height    = (showGameInfoWindow() ? this.goldWindowRect().y : Graphics.boxHeight)
                            - y
                            - this.commandWindowRect().height;

        return new Rectangle(x, y, width, height);
    }
    const width     = Graphics.boxWidth - this.mainCommandWidth();
    const x         = this.isRightInputMode() ? 0 : Graphics.boxWidth - width;
    const y         = this.mainAreaTop ? this.mainAreaTop() : 0;
    const height    = Graphics.boxHeight - y;
    return new Rectangle(x, y, width, height);
}

Scene_MenuBase.prototype.statusWindowRect = Scene_Menu.prototype.statusWindowRect;


// Override
Scene_Menu.prototype.goldWindowRect = function() {
    if (config.overrideGoldRectangle) {

        return new Rectangle(
            config.goldRectangle_x || 0,
            config.goldRectangle_y || 0,
            config.goldRectangle_width || 0,
            config.goldRectangle_height || 0,
        );
    }
    if (['top', 'bottom'].includes(config.commandOrientation) || 'none' == config.statusOrientation) {
        const height    = this.calcWindowHeight(1, true);
        const width     = Graphics.boxWidth;
        const x         = 0;
        const y         = Graphics.boxHeight - height;

        return new Rectangle(x, y, width, height);
    }

    const n         = gameInfoWindowNumberOfLines();
    const height    = this.calcWindowHeight(n, true);
    const width     = this.mainCommandWidth();
    const x         = this.isRightInputMode() ? Graphics.boxWidth - width : 0;
    const y         = Graphics.boxHeight - height;

    return new Rectangle(x, y, width, height);
}

function gameInfoWindowNumberOfLines() {
    return Math.max(
        (config.gameInfoTextLeft || '').split('\n').length,
        (config.gameInfoTextRight || '').split('\n').length,
        1,
    );
}

const _SceneMenu_createStatusWindow = Scene_Menu.prototype.createStatusWindow;
Scene_Menu.prototype.createStatusWindow = function() {
    _SceneMenu_createStatusWindow.call(this);

    if ('none' == config.statusOrientation) this._statusWindow.hide();
}

// Override
Scene_Menu.prototype.createGoldWindow = function() {
    const rectangle = this.goldWindowRect();
    this._goldWindow = new Window_GameInfo(rectangle);
    this.addWindow(this._goldWindow);

    if (!showGameInfoWindow()) this._goldWindow.hide();
}

if ('MZ' == Utils.RPGMAKER_NAME) {
    
    const _SceneMenu_mainCommandWidth = Scene_Menu.prototype.mainCommandWidth;
    Scene_Menu.prototype.mainCommandWidth = function() {
        return ['top', 'bottom'].includes(config.commandOrientation) &&
            'none' != config.statusOrientation
            ? Graphics.boxWidth
            : config.commandWidth || _SceneMenu_mainCommandWidth.call(this);
    }

} else { // MV

    Scene_MenuBase.prototype.mainCommandWidth = function() {
        return ['top', 'bottom'].includes(config.commandOrientation) &&
            'none' != config.statusOrientation
            ? Graphics.boxWidth
            : config.commandWidth || Window_MenuCommand.prototype.windowWidth.call(null);
    }

    const _WindowMenuCommand_windowWidth = Window_MenuCommand.prototype.windowWith;
    Window_MenuCommand.prototype.windowWith = function() {
        return ['top', 'bottom'].includes(config.commandOrientation) &&
            'none' != config.statusOrientation
            ? Graphics.boxWidth
            : config.commandWidth || _WindowMenuCommand_windowWidth.call(this);
    }

} // MV

Window_MenuCommand.prototype.maxCols = function() {
    if ('none' == config.statusOrientation) {
        return config.commandNumberOfColumns || 1
    }
    if ('top' == config.commandOrientation || 'bottom' == config.commandOrientation) {
        return config.commandNumberOfColumns || 4
    }
    return 1;
}

const _WindowMenuStatus_maxCols = Window_MenuStatus.prototype.maxCols;
Window_MenuStatus.prototype.maxCols = function() {
    if (!isScene(Scene_Menu)) {
        return _WindowMenuStatus_maxCols.call(this);
    }
    if ('single actor' == config.statusOrientation) return 1;
    if ('rows' == config.statusOrientation)         return 1;
    if (!config.statusOrientation)                  return 1;

    if (config.autoAdjustVisibleActors) {
        return $gameParty.members().length.clamp(
            config.visibleActors || 1,
            config.visibleActorsMax || 4,
        );
    }
    return config.visibleActors || 4;
}

const _WindowMenuStatus_numVisibleRows = Window_MenuStatus.prototype.numVisibleRows;
Window_MenuStatus.prototype.numVisibleRows = function() {
    if (!isScene(Scene_Menu)) {
        return _WindowMenuStatus_numVisibleRows.call(this);
    }
    if ('single actor' == config.statusOrientation) return 1;
    if ('columns' == config.statusOrientation) return 1;

    if (config.autoAdjustVisibleActors) {
        return $gameParty.members().length.clamp(
            config.visibleActors || 1,
            config.visibleActorsMax || 4,
        );
    }
    return config.visibleActors || 4;
}


// =====================================================================================
// Windows General
// =====================================================================================

if ('MZ' == Utils.RPGMAKER_NAME) {

const _WindowBase_itemHeight = Window_Base.prototype.itemHeight;
Window_Base.prototype.itemHeight = function() {
    return config.windowItemHeight || _WindowBase_itemHeight.call(this);
}

const _WindowBase_itemPadding = Window_Base.prototype.itemPadding;
Window_Base.prototype.itemPadding = function() {
    return config.windowItemPadding >= 0
        ? config.windowItemPadding
        : _WindowBase_itemPadding.call(this);
}

const _WindowSelectable_rowSpacing = Window_Selectable.prototype.rowSpacing;
Window_Selectable.prototype.rowSpacing = function() {
    return config.windowRowSpacing >= 0
        ? config.windowRowSpacing
        : _WindowSelectable_rowSpacing.call(this);
}

const _WindowSelectable_colSpacing = Window_Selectable.prototype.colSpacing;
Window_Selectable.prototype.colSpacing = function() {
    return config.windowColumnSpacing >= 0
        ? config.windowColumnSpacing
        : _WindowSelectable_colSpacing.call(this);
}

}

if ('MV' == Utils.RPGMAKER_NAME) {

const _WindowSelectable_itemHeight = Window_Selectable.prototype.itemHeight;
Window_Selectable.prototype.itemHeight = function() {
    return config.windowItemHeight || _WindowSelectable_itemHeight.call(this);
}

} // MV


// =====================================================================================
// Cursor
// =====================================================================================

if ('MV' == Utils.RPGMAKER_NAME) {

Window.prototype._makeCursorAlpha = function() {
    const blinkCount = this._animationCount % 40;
    const cursorOpacity = this.contentsOpacity;

    if (this.active && blinkCount < 20) {
        return (cursorOpacity - blinkCount * 8) / 255;
    }
    if (this.active) {
        return (cursorOpacity - (40 - blinkCount) * 8) / 255;
    }
    return cursorOpacity / 255;
}

// Override
Window.prototype._updateCursor = function() {
    this._windowCursorSprite.alpha = this._makeCursorAlpha();
    this._windowCursorSprite.visible = this.isOpen();
}

}

// make Cursor (not) blink
const _WindowSelectable_makeCursorAlpha = Window_Selectable.prototype._makeCursorAlpha;
Window_Selectable.prototype._makeCursorAlpha = function() {
    return config.blinkCursor !== false
        ? _WindowSelectable_makeCursorAlpha.call(this)
        : 1;
}

// hide default cursor
const _WindowSelectable_createCursorSprite = Window_Selectable.prototype._createCursorSprite;
Window_Selectable.prototype._createCursorSprite = function() {
    _WindowSelectable_createCursorSprite.call(this);

    if ('image' == config.cursorStyle) {
        if (this._cursorSprite)         this._cursorSprite.visible = false;
        if (this._windowCursorSprite)   this._windowCursorSprite.visible = false;
    }
}

// hide default cursor
const _WindowSelectable_updateCursor = Window_Selectable.prototype._updateCursor;
Window_Selectable.prototype._updateCursor = function() {
    _WindowSelectable_updateCursor.call(this);

    if ('image' == config.cursorStyle) {
        if (this._cursorSprite)         this._cursorSprite.visible = false;
        if (this._windowCursorSprite)   this._windowCursorSprite.visible = false;
    }
}

// add custom cursor to Scene
const _SceneBase_start = Scene_Base.prototype.start;
Scene_Base.prototype.start = function() {
    _SceneBase_start.call(this);

    if ('image' == config.cursorStyle) {
        this.createCursorLayer();
    }
}

Scene_Base.prototype.createCursorLayer = function() {
    this._cursorLayer = new CursorLayer();
    this.addChild(this._cursorLayer);
}

function CursorLayer() {
    this.initialize.call(this, ...arguments);
}

CursorLayer.prototype = Object.create(Sprite.prototype);
CursorLayer.prototype.constructor = CursorLayer;

CursorLayer.prototype.initialize = function() {
    Sprite.prototype.initialize.call(this);
    
    this.createCursorSprites();
}

CursorLayer.prototype.createCursorSprites = function() {
    const windowLayer = SceneManager._scene && SceneManager._scene._windowLayer;

    if (windowLayer) {
        windowLayer.children
            .filter(gameWindow => gameWindow instanceof Window_Selectable)
            .forEach(gameWindow => {
                const cursorSprites = new Sprite_Cursors(gameWindow);
                this.addChild(cursorSprites);
            });
    }
}

function Sprite_Cursors() {
    this.initialize.call(this, ...arguments);
}

Sprite_Cursors.prototype = Object.create(Sprite.prototype);
Sprite_Cursors.prototype.constructor = Sprite_Cursors;

Sprite_Cursors.prototype.initialize = function(gameWindow) {
    if (!gameWindow) throw Error('Must have a Game Window.');
    
    this._window = gameWindow;
    this._maxItems = gameWindow.maxItems();

    Sprite.prototype.initialize.call(this);

    this.refreshCursorSprites();
}

Sprite_Cursors.prototype.refreshCursorSprites = function() {
    this.removeChildren();
    this.createCursorSprites();

    this._maxItems = this._window.maxItems();
}

Sprite_Cursors.prototype.createCursorSprites = function() {
    for (let index = 0; index < this._window.maxItems(); index++) {
        const cursorSprite = new CursorSprite(this._window, index);
        cursorSprite.update();
        
        this.addChild(cursorSprite);
    }
}

Sprite_Cursors.prototype.update = function() {
    Sprite.prototype.update.call(this);

    const maxItems = this._window.maxItems();

    if (this._maxItems < maxItems) {
        this.refreshCursorSprites();
    }
}


function CursorSprite() {
    this.initialize.call(this, ...arguments);
}

CursorSprite.prototype = Object.create(Sprite.prototype);
CursorSprite.prototype.constructor = CursorSprite;

CursorSprite.prototype.initialize = function(gameWindow, index) {
    if (gameWindow === undefined)   throw Error('Must have a Game Window.');
    if (index === undefined)        throw Error('Must have an index.');
    
    this._window = gameWindow;
    this._index = index;

    const filename = config.cursorBackgroundFile;
    const bitmap = filename && ImageManager.loadBitmap('img/system/', filename);
    
    if (bitmap) {
        Sprite.prototype.initialize.call(this, bitmap);
    } else {
        Sprite.prototype.initialize.call(this);
    }
}

CursorSprite.prototype.update = function() {
    Sprite.prototype.update.call(this);

    this.updatePosition();

    this.visible = this.isVisible();
    this.opacity = this.getOpacity();
}

CursorSprite.prototype.updatePosition = function() {
    const rect = this._window.itemRect(this._index);

    this.x = (this._window.x + rect.x + (config.cursorAdjustX || 0));
    this.y = (this._window.y + rect.y + (config.cursorAdjustY || 0));
}

CursorSprite.prototype.isVisible = function() {
    return this._window.isOpenAndActive() && (
        this._window.index() == this._index ||
        this._window.cursorAll()
    );
}

CursorSprite.prototype.getOpacity = function() {
    return 255 * this._window._makeCursorAlpha();
}


// =====================================================================================
// Windows General
// =====================================================================================

// Override
Window_Command.prototype.drawItem = function(index) {
    const rect          = this.itemLineRect(index);
    const align         = this.itemTextAlign();
    const mode          = this.iconTextStyle() || 'text';
    const iconIndex     = typeof this.commandIcon(index) == 'number'
                            ? this.commandIcon(index)
                            : extractIconIndex(this.commandName(index));
    const commandName   = stripTextExCommands(this.commandName(index)) || '';

    !this.isCommandEnabled(index) && config.overrideDisabledTextColor
        ? this.changeTextColor(config.disabledTextColor)
        : this.resetTextColor();

    this.changePaintOpacity(this.isCommandEnabled(index));

    if ('both' == mode || 'iconAndText' == mode) {
        this.drawIcon(
            iconIndex,
            rect.x,
            rect.y + rect.height / 2 - ImageManager.iconHeight / 2,
        );
        
        this.drawText(
            commandName,
            rect.x + ImageManager.iconWidth + 4,
            rect.y,
            rect.width - ImageManager.iconWidth - 4,
            align,
        );
    }
    if ('text' == mode) {
        this.drawText(
            commandName,
            rect.x,
            rect.y,
            rect.width,
            align,
        );
    }
    if ('icon' == mode) {
        let x;
        if ('left' == align)    x = rect.x;
        if ('center' == align)  x = rect.x + rect.width / 2 - ImageManager.iconWidth / 2;
        if ('right' == align)   x = rect.x + rect.width - ImageManager.iconWidth;

        this.drawIcon(
            iconIndex,
            x,
            rect.y + rect.height / 2 - ImageManager.iconHeight / 2,
        );
    }

    this.changePaintOpacity(true);
    this.resetTextColor();
}

Window_Command.prototype.commandIcon = function(index) {
    return null; // to be overridden
}

function extractIconIndex(text) {
    const match = text && text.match(/\\I\[(\d+)\]/);
    return match ? Number(match[1]) : undefined;
}

function stripTextExCommands(text) {
    if (text) {
        return text
            .replace(/\\I\[\d+\]/g, '') // remove icon commands
            .replace(/\\C\[\d+\]/g, '') // remove color commands
            .trim();
    }
}

Window_Command.prototype.iconTextStyle = function() {
    return 'text'; // to be overridden
}

const _WindowBase_translucentOpacity = Window_Base.prototype.translucentOpacity;
Window_Base.prototype.translucentOpacity = function() {
    return config.disabledTextOpacity >= 0
        ? config.disabledTextOpacity
        : _WindowBase_translucentOpacity.call(this);
}


// =====================================================================================
// Menu Background
// =====================================================================================

const _SceneMenuBase_createBackground = Scene_MenuBase.prototype.createBackground;
Scene_MenuBase.prototype.createBackground = function() {
    const type      = config.sceneBackgroundType || 'mapSprite';
    const effects   = config.sceneBackgroundEffects || 'blurred';
    const filepath  = config.sceneBackgroundFile;
    const bitmap    = ImageManager.loadBitmapFromFilepath(filepath);
    
    if ('mapSprite' == type) {
        if ('blurred' == effects) {
            _SceneMenuBase_createBackground.call(this);
        } else {
            this._backgroundSprite = new Sprite();
            this._backgroundSprite.bitmap = SceneManager.backgroundBitmap();

            this.addChild(this._backgroundSprite);
            this.setBackgroundOpacity(192);
        }
        if ('blackWhite' == effects) {
            const filter = new PIXI.filters.ColorMatrixFilter();
            filter.desaturate();
            this._backgroundSprite.filters = [filter];
        }
        if ('sepia' == effects) {
            const filter = new PIXI.filters.ColorMatrixFilter();
            filter.sepia();
            this._backgroundSprite.filters = [filter];
        }
    }
    if ('image' == type && bitmap) {
        this._backgroundSprite = new Sprite(bitmap);

        bitmap.addLoadListener(() => {
            this._backgroundSprite.scale.x = Graphics.width / bitmap.width;
            this._backgroundSprite.scale.y = Graphics.height / bitmap.height;
        });

        this.addChild(this._backgroundSprite);
        this.setBackgroundOpacity(192);
    }
    if (!this._backgroundSprite) {
        this._backgroundSprite = new Sprite();
        this.addChild(this._backgroundSprite);
        this.setBackgroundOpacity(192);
    }
}

ImageManager.loadBitmapFromFilepath = function(filepath) {
    const filename  = filepath && Utils.extractFileName(filepath).replace('.png', '').replace('.PNG', '');
    const folder    = filepath && filepath.replace(Utils.extractFileName(filepath), '');

    if (filename && folder) {
        return ImageManager.loadBitmap(folder, filename);
    }
}


// =====================================================================================
// Game Actor
// =====================================================================================

Game_Actor.prototype.menuPortrait = function() {
    if (this._menuPortrait) {
        return this._menuPortrait;
    }

    const name = this.actor().meta["Menu Portrait"];
    return name && name.trim();
}

Game_Actor.prototype.setMenuPortrait = function(pictureName) {
    this._menuPortrait = pictureName;
}

Game_Actor.prototype.resetMenuPortrait = function() {
    this._menuPortrait = undefined;
}

// =====================================================================================
// Status Window
// =====================================================================================

function getBitmap(type, actor) {
    if ('face' == type)         return ImageManager.loadFace(actor.faceName());
    if ('battler' == type)      return ImageManager.loadSvActor(actor.battlerName());
    if ('mapSprite' == type)    return ImageManager.loadCharacter(actor.characterName());
    if ('portrait' == type)     return ImageManager.loadPicture(actor.menuPortrait());
}

function pictureWidth(type, actor, bitmap) {
    if (!bitmap) return 0;

    if ('face' == type) {
        return ImageManager.faceWidth;
    }
    if ('battler' == type) {
        return bitmap.width / 9;
    }
    if ('mapSprite' == type) {
        const isBig = ImageManager.isBigCharacter(actor.characterName());
        return bitmap.width / (isBig ? 3 : 12);
    }
    return bitmap.width;
}

function pictureHeight(type, actor, bitmap) {
    if (!bitmap) return 0;
    
    if ('face' == type) {
        return ImageManager.faceHeight;
    }
    if ('battler' == type) {
        return bitmap.height / 6;
    }
    if ('mapSprite' == type) {
        const isBig = ImageManager.isBigCharacter(actor.characterName());
        return bitmap.height / (isBig ? 4 : 8);
    }
    return bitmap.height;
}

function sourceX(type, actor, bitmap) {
    if (!bitmap) return 0;
    
    if ('face' == type) {
        return (actor.faceIndex() % 4) * ImageManager.faceHeight;
    }
    if ('battler' == type) {
        return bitmap.width / 9;
    }
    if ('mapSprite' == type) {
        const isBig = ImageManager.isBigCharacter(actor.characterName());
        const n     = isBig ? 0 : actor.characterIndex();
        return ((n % 4) * 3 + 1) * pictureWidth(type, actor, bitmap);
    }
    return 0;
}

function sourceY(type, actor, bitmap) {
    if (!bitmap) return 0;

    if ('face' == type) {
        return Math.floor(actor.faceIndex() / 4) * ImageManager.faceHeight;
    }
    if ('battler' == type) {
        return 0;
    }
    if ('mapSprite' == type) {
        const isBig = ImageManager.isBigCharacter(actor.characterName());
        const n     = isBig ? 0 : actor.characterIndex();
        return Math.floor(n / 4) * 4 * pictureHeight(type, actor, bitmap);
    }
    return 0;
}

function getAnchorX(align) {
    if ('center' == align) return 0.5;
    if ('right' == align) return 1;
    return 0;
}

function getAnchorY(align) {
    if ('middle' == align) return 0.5;
    if ('bottom' == align) return 1;
    return 0;
}

Window_MenuStatus.prototype.getBackOpacity = function() {
    return typeof config.statusOpacity == 'number'
        ? config.statusOpacity
        : Window_Base.prototype.getBackOpacity.call(this);
}

Window_MenuStatus.prototype.shouldOverrideWindowSkin = function() {
    return config.overrideStatusWindow;
}

Window_MenuStatus.prototype.getWindowSkinFile = function() {
    return config.statusWindowFile;
}

const _WindowMenuStatus_rowSpacing = Window_MenuStatus.prototype.rowSpacing;
Window_MenuStatus.prototype.rowSpacing = function() {
    return config.statusRowSpacing || config.statusRowSpacing === 0
        ? config.statusRowSpacing
        : _WindowMenuStatus_rowSpacing.call(this);
}

const _WindowMenuStatus_colSpacing = Window_MenuStatus.prototype.colSpacing;
Window_MenuStatus.prototype.colSpacing = function() {
    return config.statusColumnSpacing || config.statusColumnSpacing === 0
        ? config.statusColumnSpacing
        : _WindowMenuStatus_colSpacing.call(this);
}

Window_MenuStatus.prototype.getBackgroundType = function() {
    return config.statusBackgroundType;
}

Window_MenuStatus.prototype.getBackgroundFile = function() {
    return config.statusBackgroundFile;
}

Window_MenuStatus.prototype.getItemBackgroundType = function() {
    return config.statusItemBackgroundType;
}

Window_MenuStatus.prototype.getItemBackgroundFile = function() {
    return config.statusItemBackgroundFile;
}

const _WindowMenuStatus_createCursorSprite = Window_MenuStatus.prototype._createCursorSprite;
Window_MenuStatus.prototype._createCursorSprite = function() {
    const filepath = config.statusCursorBackgroundFile;
    
    if ('image' == config.statusCursorBackgroundType && filepath) {
        const bitmap = ImageManager.loadBitmapFromFilepath(filepath);

        this._cursorSprite = new Sprite(bitmap);
        this._cursorSprite.children = [ ];
        this._clientArea.addChild(this._cursorSprite);
    } else {
        _WindowMenuStatus_createCursorSprite.call(this);
    }
}

const _WindowMenuStatus_refreshCursor = Window_MenuStatus.prototype._refreshCursor;
Window_MenuStatus.prototype._refreshCursor = function() {
    if ('image' == config.statusCursorBackgroundType && config.statusCursorBackgroundFile) {
        //
    } else {
        _WindowMenuStatus_refreshCursor.call(this);
    }
}

const _WindowMenuStatus_updateCursor = Window_MenuStatus.prototype._updateCursor;
Window_MenuStatus.prototype._updateCursor = function() {
    if ('image' == config.statusCursorBackgroundType && config.statusCursorBackgroundFile) {
        if (this._cursorSprite) {
            this._cursorSprite.alpha    = config.statusBlinkCursor ? this._makeCursorAlpha() : 255;
            this._cursorSprite.visible  = this.isOpenAndActive() && this.cursorVisible;
            this._cursorSprite.x        = this._cursorRect.x;
            this._cursorSprite.y        = this._cursorRect.y;
            this._cursorSprite.scale.x  = this._cursorRect.width / this._cursorSprite.width;
            this._cursorSprite.scale.y  = this._cursorRect.height / this._cursorSprite.height;
        }
    } else {
        _WindowMenuStatus_updateCursor.call(this);
    }
}

const _WindowMenuStatus_drawPendingItemBackground = Window_MenuStatus.prototype.drawPendingItemBackground;
Window_MenuStatus.prototype.drawPendingItemBackground = function(index) {
    if ('image' == config.statusPendingBackgroundType) {
        if (index !== this._pendingIndex) return;
        
        const rect      = this.itemRect(index);
        const filepath  = config.statusPendingBackgroundFile;
        const bitmap    = ImageManager.loadBitmapFromFilepath(filepath);

        if (!bitmap) return;
        if (!bitmap.isReady()) return;

        this.contents.blt(
            bitmap,
            0,
            0,
            bitmap.width,
            bitmap.height,
            rect.x,
            rect.y,
            rect.width,
            rect.height,
        );
    } else {
        _WindowMenuStatus_drawPendingItemBackground.call(this, index);
    }
}

// Override
const _WindowMenuStatus_drawItemImage = Window_MenuStatus.prototype.drawItemImage;
Window_MenuStatus.prototype.drawItemImage = function(index) {

    if (!isScene(Scene_Menu)) {
        _WindowMenuStatus_drawItemImage.call(this, index);
        return;
    }

    const actor     = this.actor(index);
    const type      = config.statusRenderType || 'face';
    const bitmap    = getBitmap(type, actor);

    if (bitmap) {
        const pw        = pictureWidth(type, actor, bitmap);
        const ph        = pictureHeight(type, actor, bitmap);
        const xScale    = (config.actorImageScaleX || 100) / 100;
        const yScale    = (config.actorImageScaleY || 100) / 100;
        const xCrop1    = Math.max(pw * xScale - this.itemRect(index).width, 0) / xScale;
        const yCrop1    = Math.max(ph * yScale - this.itemRect(index).height, 0) / yScale;
        const xCrop     = xCrop1 + (2 * config.actorImageCropX || 0);
        const yCrop     = yCrop1 + (2 * config.actorImageCropY || 0);

        const sw = Math.max(pw - xCrop, 0);
        const sh = Math.max(ph - yCrop, 0);
        const sx = sourceX(type, actor, bitmap) + (pw - sw) / 2;
        const sy = sourceY(type, actor, bitmap) + (ph - sh) / 2;

        const xAnchor = getAnchorX(config.actorImageHorzAlign || 'left');
        const yAnchor = getAnchorY(config.actorImageVertAlign || 'middle');

        const dx    = this.itemRect(index).x
                        + this.itemRect(index).width * xAnchor
                        - sw * xScale * xAnchor
                        + (config.actorImageOffsetX || 0);
        const dy    = this.itemRect(index).y
                        + this.itemRect(index).height * yAnchor
                        - sh * yScale * yAnchor
                        + (config.actorImageOffsetY || 0);

        this.changePaintOpacity(actor.isBattleMember());
        
        this.contents.blt(
            bitmap,
            sx,
            sy,
            sw,
            sh,
            dx,
            dy,
            sw * xScale,
            sh * yScale,
        );
        
        this.changePaintOpacity(true);
    }
    if (config.showShadowBox !== false) {
        this.drawShadowBox(index);
    }
}

Window_MenuStatus.prototype.actor = function(index) {
    return $gameParty.members()[index];
}

Window_MenuStatus.prototype.drawShadowBox = function(index) {
    const rectangle = this.itemRect(index);
    const x         = (config.shadowBoxX || 0) + rectangle.x;
    const y         = (config.shadowBoxY || 0) + rectangle.y;
    const width     = Math.min(
                        config.shadowBoxWidth || rectangle.width,
                        rectangle.width - (config.shadowBoxX || 0),
                    );
    const height    = Math.min(
                        config.shadowBoxHeight || rectangle.height,
                        rectangle.height - (config.shadowBoxY || 0),
                    );
    const direction = config.shadowBoxGradientDirection || 'left';
    const power     = (config.shadowBoxGradientPower !== undefined
                        ? config.shadowBoxGradientPower
                        : 10
                    ).clamp(0, 100);
    const delta     = (['top', 'bottom'].includes(direction) ? height : width) * (power / 100);

    const width2    = ['left', 'right'].includes(direction) ? delta : width;
    const height2   = ['top', 'bottom'].includes(direction) ? delta : height;
    const width1    = ['left', 'right'].includes(direction) ? width - width2 : width;
    const height1   = ['top', 'bottom'].includes(direction) ? height - height2 : height;

    const x1        = 'left' == direction ? x + width2 : x;
    const y1        = 'top' == direction ? y + height2 : y;
    const x2        = 'right' == direction ? x + width1 : x;
    const y2        = 'bottom' == direction ? y + height1 : y;

    const opacity   = config.shadowBoxOpacity || config.shadowBoxOpacity === 0 ? config.shadowBoxOpacity : (255 * 0.6);
    const color     = hexToRGBA(config.shadowBoxColor, opacity) || getColor(0, 0, 0, 0.6);
    const color1    = ['bottom', 'right'].includes(direction) ? color : getColor(0, 0, 0, 0);
    const color2    = ['top', 'left'].includes(direction) ? color : getColor(0, 0, 0, 0);
    
    this.contents.fillRect(x1, y1, width1, height1, color);
    this.contents.gradientFillRect(
        x2,
        y2,
        width2,
        height2,
        color1,
        color2,
        ['top', 'bottom'].includes(direction),
    );
}

const hexToRGBA = (hex, opacity) => {
    if (!hex) return;

    const r = hexToDec(hex.slice(1, 3));
    const g = hexToDec(hex.slice(3, 5));
    const b = hexToDec(hex.slice(5, 7));
    return getColor(r, g, b, opacity / 255);
}

const hexToDec = (hex) => Number('0x' + hex);
const getColor = (r, g, b, a) => 'rgba(%1, %2, %3, %4)'.format(r || 0, g || 0, b || 0, a || 0);


// Override
const _WindowMenuStatus_drawItemStatus = Window_MenuStatus.prototype.drawItemStatus;
Window_MenuStatus.prototype.drawItemStatus = function(index) {

    if (isScene(Scene_Menu)) {
        const actor = this.actor(index);
        
        this.drawActorName(
            actor,
            this.actorNamePos(index).x,
            this.actorNamePos(index).y,
            config.nameWidth || 2 * this.textWidth('01234567890'),
        );

        this.drawActorClass(
            actor,
            this.classNamePos(index).x,
            this.classNamePos(index).y,
            config.classWidth || 2 * this.textWidth('01234567890'),
        );

        this.drawActorLevel(actor,      this.levelPos(index).x,         this.levelPos(index).y);
        this.drawActorIcons(actor,      this.statusIconsPos(index).x,   this.statusIconsPos(index).y);
        this.drawActorHpMpTp(actor,     this.hpMpPos(index).x,          this.hpMpPos(index).y);
    }
    else {
        _WindowMenuStatus_drawItemStatus.call(this, index);
    }
}

Window_MenuStatus.prototype.actorNamePos = function(index) {
    return getTextPos(
        this,
        index,
        config.nameWidth || 2 * this.textWidth('01234567890'),
        this.textHeightByFontSize(config.nameFontSize),
        config.nameHorzAlign || 'center',
        config.nameVertAlign || 'top',
        config.nameX,
        config.nameY,
    );
}

Window_MenuStatus.prototype.classNamePos = function(index) {
    return getTextPos(
        this,
        index,
        config.classWidth || 2 * this.textWidth('01234567890'),
        this.textHeightByFontSize(config.classFontSize),
        config.classHorzAlign || 'right',
        config.classVertAlign || 'top',
        config.classX,
        config.classY,
    );
}

Window_MenuStatus.prototype.levelPos = function(index) {
    const boxWidth = 'text' == config.showLevelMode
        ? this.textWidth(TextManager.levelA)
            + (config.levelGap || 48)
            + this.textWidth('99')
        : this.gaugeWidth();
    
    return getTextPos(
        this,
        index,
        boxWidth,
        this.textHeightByFontSize(config.levelFontSize),
        config.levelInfoHorzAlign || 'center',
        config.levelInfoVertAlign || 'bottom',
        config.levelX,
        config.levelY,
    );
}

Window_MenuStatus.prototype.statusIconsPos = function(index) {
    const actor     = this.actor(index);
    const icons     = actor.allIcons().slice(0, config.statusEffectsMaxIcons || 8);
    const boxWidth  = icons.length * ImageManager.iconWidth;
    
    return getTextPos(
        this,
        index,
        boxWidth,
        ImageManager.iconHeight,
        config.statusEffectsHorzAlign || 'left',
        config.statusEffectsVertAlign || 'middle',
        config.statusEffectsX,
        config.statusEffectsY,
    );
}

Window_MenuStatus.prototype.hpMpPos = function(index) {
    return getTextPos(
        this,
        index,
        this.hpMpBoxWidth(),
        this.hpMpBoxHeight(index),
        config.hpGaugeHorzAlign || 'right',
        config.hpGaugeVertAlign || 'bottom',
        config.hpGaugeX,
        (config.hpGaugeY || 0) - 2,
    );
}

Window_MenuStatus.prototype.hpMpBoxWidth = function() {
    if (config.hpTextWidth) return config.hpTextWidth;
    
    this.setFontSize(config.hpFontSize);

    const showHpMode = config.showHpMode || 'gauge';
    let result = 0;
    if ('text' == showHpMode)   result = this.textWidth('HP  9999 / 9999');
    if ('gauge' == showHpMode)  result = this.gaugeWidth();
    
    this.resetFontSettings();
    return result;
}

Window_MenuStatus.prototype.hpMpBoxHeight = function(index) {
    const actor = this.actor(index);
    const n = [
            this.usesMp(actor),
            this.usesTp(actor),
        ]
        .filter(Boolean)
        .length + 1;
    
    return n * this.gaugeVerticalSpace();
}

function getTextPos(gameWindow, index, boxWidth, boxHeight, horzAlign, vertAlign, xOffset, yOffset) {
    const rectangle = gameWindow.itemRect(index);
    const xAnchor   = getAnchorX(horzAlign);
    const yAnchor   = getAnchorY(vertAlign);

    const x = rectangle.x
                + (rectangle.width * xAnchor)
                - (xAnchor * boxWidth)
                + (xOffset || 0);
    const y = rectangle.y
                + (rectangle.height * yAnchor)
                - (boxHeight * yAnchor)
                + (yOffset || 10);
    
    return { x, y };
}


Window_MenuStatus.prototype.gaugeWidth = function() {
    return 'MZ' == Utils.RPGMAKER_NAME
        ? new Sprite_Gauge().width
        : config.hpGaugeWidth || 200;
}

Window_MenuStatus.prototype.gaugeHeight = function() {
    return 'MZ' == Utils.RPGMAKER_NAME
        ? new Sprite_Gauge().height
        : config.hpGaugeHeight || 6;
}

Window_MenuStatus.prototype.gaugeVerticalSpace = function() {
    if (typeof config.hpGaugeVerticalSpace === 'number') {
        return config.hpGaugeVerticalSpace;
    }
    if ('MV' == Utils.RPGMAKER_NAME) {
        return this.lineHeight();
    }
    if ('text' == config.showHpMode) {
        return 0.8 * this.textHeightByFontSize(config.hpFontSize);
    }
    return this.gaugeLineHeight();
}

const _WindowMenuStatus_gaugeLineHeight = Window_MenuStatus.prototype.gaugeLineHeight;
Window_MenuStatus.prototype.gaugeLineHeight = function() {
    return config.hpGaugeVerticalSpace || _WindowMenuStatus_gaugeLineHeight.call(this);
}

// Override
Window_MenuStatus.prototype.drawActorName = function(actor, x, y, width) {
    if (config.showName === false) return;

    width = width || 2 * this.textWidth('01234567890');

    if ('none' != config.nameBackgroundType) {
        const fontSize  = isScene(Scene_Menu) ? config.nameFontSize : undefined;
        const height    = this.textHeightByFontSize(fontSize);
        
        this.drawHorzGradient(
            x - 8,
            y,
            width + 16,
            height,
            config.nameTextAlign || 'left',
            ColorManager.dimColor1(),
            ColorManager.dimColor2(),
        );
    }
    
    isScene(Scene_Menu) && this.setFontSize(config.nameFontSize);

    this.changeTextColor(this.nameTextColor(actor));
    this.drawText(actor.name(), x, y, width, config.nameTextAlign);
    this.resetFontSettings();
}

Window_MenuStatus.prototype.nameTextColor = function(actor) {
    if (actor && actor.isDying())   return ColorManager.crisisColor();
    if (actor && actor.isDead())    return ColorManager.deathColor();
    
    return ColorManager.textColor(config.nameTextColor || 0);
}

Window_Base.prototype.drawHorzGradient = function(x, y, width, height, textAlign, color1, color2) {
    if ('left' == textAlign) {
        this.contents.gradientFillRect(x, y, width, height, color1, color2);
    }
    if ('center' == textAlign || !textAlign) {
        this.contents.gradientFillRect(x, y, width / 2, height, color2, color1);
        this.contents.gradientFillRect(x + width / 2, y, width / 2, height, color1, color2);
    }
    if ('right' == textAlign) {
        this.contents.gradientFillRect(x, y, width, height, color2, color1);
    }
}

Sprite.prototype.drawHorzGradient = function(x, y, width, height, textAlign, color1, color2) {
    if ('left' == textAlign) {
        this.bitmap.gradientFillRect(x, y, width, height, color1, color2);
    }
    if ('center' == textAlign || !textAlign) {
        this.bitmap.gradientFillRect(x, y, width / 2, height, color2, color1);
        this.bitmap.gradientFillRect(x + width / 2, y, width / 2, height, color1, color2);
    }
    if ('right' == textAlign) {
        this.bitmap.gradientFillRect(x, y, width, height, color2, color1);
    }
}

// Override
Window_MenuStatus.prototype.drawActorClass = function(actor, x, y, width) {
    if (config.showClass === false) return;

    this.resetFontSettings();
    isScene(Scene_Menu) && this.setFontSize(config.classFontSize);

    const textColorCode = config.classTextColor !== undefined ? config.classTextColor : 16;
    this.changeTextColor(ColorManager.textColor(textColorCode));
    
    this.drawText(
        actor.currentClass().name,
        x,
        y,
        width || 2 * this.textWidth('01234567890'),
        config.classTextAlign || 'right',
    );
    
    this.resetFontSettings();
}

// Override
Window_MenuStatus.prototype.drawActorLevel = function(actor, x, y) {
    const showLevelMode = config.showLevelMode || 'gauge';
    
    if ('text' == showLevelMode) {
        this.resetFontSettings();
        this.setFontSize(config.levelFontSize);
        this.changeTextColor(ColorManager.textColor(config.levelTextColor1 || 0));
        this.drawText(TextManager.levelA, x, y, 48);

        this.changeTextColor(ColorManager.textColor(config.levelTextColor2 || 0));
        this.drawText(actor.level, x + (config.levelGap || 48), y, 36, 'right');
        this.resetFontSettings();
    }
    if ('MV' == Utils.RPGMAKER_NAME && 'gauge' == showLevelMode) {
        // not supported
    }
    if ('MZ' == Utils.RPGMAKER_NAME && 'gauge' == showLevelMode) {
        this.placeGauge(actor, 'exp', x, y);
    }
}

Window_MenuStatus.prototype.drawActorHpMpTp = function(actor, x, y) {
    const width = this.hpMpBoxWidth();
    const showHpMode = config.showHpMode || 'gauge';

    if ('text' == showHpMode) {
        this.drawActorHpMpTpAsText(actor, x, y, width);
    }
    if ('gauge' == showHpMode && 'MV' == Utils.RPGMAKER_NAME) {
        this.drawActorHpMpTpGaugesMV(actor, x, y, width);
    }
    if ('gauge' == showHpMode && 'MZ' == Utils.RPGMAKER_NAME) {
        this.placeBasicGauges(actor, x, y);
    }
}

// Override
Window_MenuStatus.prototype.placeBasicGauges = function(actor, x, y) {
    const showMp = this.usesMp(actor);
    const showTp = this.usesTp(actor);
    
    this.placeGauge(actor, 'hp', x, y);

    if (showMp && showTp) {
        this.placeGauge(actor, 'mp', x, y + this.gaugeLineHeight());
        this.placeGauge(actor, 'tp', x, y + this.gaugeLineHeight() * 2);
    }
    if (showMp && !showTp) {
        this.placeGauge(actor, 'mp', x, y + this.gaugeLineHeight());
    }
    if (!showMp && showTp) {
        this.placeGauge(actor, 'tp', x, y + this.gaugeLineHeight());
    }
}

Window_MenuStatus.prototype.drawActorHpMpTpGaugesMV = function(actor, x, y, width) {
    const showMp = this.usesMp(actor);
    const showTp = this.usesTp(actor);
    
    this.drawActorHp(actor, x, y, width);

    if (showMp && showTp) {
        this.drawActorMp(actor, x, y + this.gaugeVerticalSpace());
        this.drawActorTp(actor, x, y + this.gaugeVerticalSpace() * 2);
    }
    if (showMp && !showTp) {
        this.drawActorMp(actor, x, y + this.gaugeVerticalSpace());
    }
    if (!showMp && showTp) {
        this.drawActorTp(actor, x, y + this.gaugeVerticalSpace());
    }
}

Window_MenuStatus.prototype.drawActorHpMpTpAsText = function(actor, x, y, width) {
    const showMp = this.usesMp(actor);
    const showTp = this.usesTp(actor);
    
    this.setFontSize(config.hpFontSize);
    this.drawActorHpAsText(actor, x, y, width);

    if (showMp && showTp) {
        this.drawActorMpAsText(actor, x, y * this.gaugeVerticalSpace(), width);
        this.drawActorTpAsText(actor, x, y * this.gaugeVerticalSpace() * 2, width);
    }
    if (showMp && !showTp) {
        this.drawActorMpAsText(actor, x, y * this.gaugeVerticalSpace(), width);
    }
    if (!showMp && showTp) {
        this.drawActorTpAsText(actor, x, y * this.gaugeVerticalSpace(), width);
    }
    this.resetFontSettings();
}

Window_MenuStatus.prototype.drawActorHpAsText = function(actor, x, y, width) {
    this.changeTextColor(ColorManager.textColor(config.hpLabelTextColor !== undefined ? config.hpLabelTextColor : 16));
    this.drawText(TextManager.hpA, x, y, width);

    this.drawCurrentAndMax(
        actor.hp,
        actor.mhp,
        x + this.textWidth(TextManager.hpA),
        y,
        width - this.textWidth(TextManager.hpA),
        ColorManager.hpColor(actor),
        ColorManager.textColor(config.hpValuesTextColor || 0),
    );
    this.resetTextColor();
}

Window_MenuStatus.prototype.drawActorMpAsText = function(actor, x, y, width) {
    this.changeTextColor(ColorManager.textColor(config.mpLabelTextColor !== undefined ? config.mpLabelTextColor : 16));
    this.drawText(TextManager.mpA, x, y, width);

    this.drawCurrentAndMax(
        actor.mp,
        actor.mmp,
        x + this.textWidth(TextManager.mpA),
        y,
        width - this.textWidth(TextManager.mpA),
        ColorManager.mpColor(actor),
        ColorManager.textColor(config.mpValuesTextColor || 0),
    );
    this.resetTextColor();
}

Window_MenuStatus.prototype.drawActorTpAsText = function(actor, x, y, width) {
    this.changeTextColor(ColorManager.textColor(config.tpLabelTextColor !== undefined ? config.tpLabelTextColor : 16));
    this.drawText(TextManager.tpA, x, y, width);

    this.changeTextColor(ColorManager.tpColor(actor));
    this.drawText(
        actor.tp,
        x,
        y,
        width,
        'right',
    );
    this.resetTextColor();
}

Window_MenuStatus.prototype.usesMp = function(actor) {
    return !(
        'No MP' in actor.actor().meta ||
        (actor.currentClass() && actor.currentClass().meta && 'No MP' in actor.currentClass().meta)
    );
}

Window_MenuStatus.prototype.usesTp = function(actor) {
    if ('No TP' in actor.actor().meta) {
        return false;
    }
    if (actor.currentClass() && actor.currentClass().meta && 'No TP' in actor.currentClass().meta) {
        return false;
    }
    if (config.showTpMode == 'off')     return false;
    if (config.showTpMode == 'on')      return true;
    
    return $dataSystem.optDisplayTp;
}

if ('MZ' == Utils.RPGMAKER_NAME) {

Window_MenuStatus.prototype.drawCurrentAndMax = function(currentValue, maxValue, x, y, width, color1, color2) {
    const valueWidth = this.textWidth('9999');
    const slashWidth = this.textWidth(' / ');

    const x1 = x + width - valueWidth;
    const x2 = x1 - slashWidth;
    const x3 = x2 - valueWidth;

    this.changeTextColor(color1);
    this.drawText(currentValue, x3, y, valueWidth, 'right');
    this.changeTextColor(color2);
    this.drawText(' /', x2, y, slashWidth);
    this.drawText(maxValue, x1, y, valueWidth, 'right');
    this.resetTextColor();
}

}


// =====================================================================================
// Gauges
// =====================================================================================

if ('MZ' == Utils.RPGMAKER_NAME) {

const _SpriteGauge_bitmapWidth = Sprite_Gauge.prototype.bitmapWidth;
Sprite_Gauge.prototype.bitmapWidth = function() {
    
    if (this._statusType == 'custom') {
        return config.customParameterWidth || 200;
    }
    if (isScene(Scene_Menu) && this._statusType == 'exp') {
        return config.expGaugeWidth || 200;
    }
    if (isScene(Scene_Menu)) {
        return config.hpGaugeWidth || 200;
    }
    if (config.showGaugeMaxValues && this._statusType != 'exp') {
        return 1.5 * _SpriteGauge_bitmapWidth.call(this);
    }
    return _SpriteGauge_bitmapWidth.call(this);
}

// Override
Sprite_Gauge.prototype.bitmapHeight = function() {
    return Math.max(
        this.gaugeHeight(),
        this.textHeight(),
    );
}

const _SpriteGauge_gaugeHeight = Sprite_Gauge.prototype.gaugeHeight;
Sprite_Gauge.prototype.gaugeHeight = function() {
    
    if (this._statusType == 'custom' && config.customParameterHeight) {
        return config.customParameterHeight;
    }
    if (isScene(Scene_Menu) && this._statusType == 'exp' && config.expGaugeHeight) {
        return config.expGaugeHeight;
    }
    if (isScene(Scene_Menu) && this._statusType != 'exp' && config.hpGaugeHeight) {
        return config.hpGaugeHeight;
    }
    return _SpriteGauge_gaugeHeight.call(this);
}

const _SpriteGauge_currentValue = Sprite_Gauge.prototype.currentValue;
Sprite_Gauge.prototype.currentValue = function() {
    if (this._statusType == 'exp' && this._battler && this._battler.isMaxLevel()) {
        return 100;
    }
    if (this._statusType == 'exp' && this._battler) {
        return this._battler.currentExp() - this._battler.currentLevelExp();
    }
    if (this._statusType == 'custom' && this._battler) {
        const actor = this._battler;
        return config.customParameterCurrentValueEval
            ? silentTryCatch(() => eval(config.customParameterCurrentValueEval)) || 0
            : 0;
    }
    return _SpriteGauge_currentValue.call(this);
}

const _SpriteGauge_currentMaxValue = Sprite_Gauge.prototype.currentMaxValue;
Sprite_Gauge.prototype.currentMaxValue = function() {
    if (this._statusType == 'exp' && this._battler && this._battler.isMaxLevel()) {
        return 100;
    }
    if (this._statusType == 'exp' && this._battler) {
        return this._battler.nextLevelExp() - this._battler.currentLevelExp();
    }
    if (this._statusType == 'custom' && this._battler) {
        const actor = this._battler;
        return config.customParameterMaxValueEval
            ? silentTryCatch(() => eval(config.customParameterMaxValueEval)) || 0
            : 0;
    }
    return _SpriteGauge_currentMaxValue.call(this);
}

const _SpriteGauge_label = Sprite_Gauge.prototype.label;
Sprite_Gauge.prototype.label = function() {
    if (this._statusType == 'exp')      return TextManager.levelA;
    if (this._statusType == 'custom')   return config.customParameterLabel;

    return _SpriteGauge_label.call(this);
}

Sprite_Gauge.prototype.labelY = function() {
    return this.height - this.labelTextHeight();
}

Sprite_Gauge.prototype.labelTextHeight = Sprite_Gauge.prototype.textHeight;

Sprite_Gauge.prototype.valueY = function() {
    return 0;
}

const _SpriteGauge_drawGaugeRect = Sprite_Gauge.prototype.drawGaugeRect;
Sprite_Gauge.prototype.drawGaugeRect = function(x, y, width, height) {
    _SpriteGauge_drawGaugeRect.call(
        this,
        x,
        this.bitmapHeight() - this.gaugeHeight(),
        width,
        this.gaugeHeight(),
    );
}

// Override
Sprite_Gauge.prototype.drawValue = function() {
    this.setupValueFont();

    if (this.shouldDisplayMaxValue()) {
        const textWidth = this.bitmap.measureTextWidth('9999');
        const slashWidth = this.bitmap.measureTextWidth(' / ');
        
        this.bitmap.drawText(
            this.currentValueAsText(),
            0,
            this.valueY(),
            this.bitmapWidth() - textWidth - slashWidth - this.paddingRight(),
            this.textHeight(),
            'right',
        );

        this.bitmap.textColor = this.maxValueColor();

        this.bitmap.drawText(
            ' / ',
            this.bitmapWidth() - textWidth - slashWidth - this.paddingRight(),
            this.valueY(),
            slashWidth,
            this.textHeight(),
            'center',
        );
        this.bitmap.drawText(
            this.currentMaxValue(),
            0,
            this.valueY(),
            this.bitmapWidth() - this.paddingRight(),
            this.textHeight(),
            'right',
        );
    } else {
        this.bitmap.drawText(
            this.currentValueAsText(),
            0,
            this.valueY(),
            this.bitmapWidth() - this.paddingRight(),
            this.textHeight(),
            "right",
        );
    }
}

Sprite_Gauge.prototype.paddingRight = function() {
    return 6;
}

Sprite_Gauge.prototype.currentValueAsText = function() {
    if (this._statusType == 'exp' && this._battler) {
        return this._battler.level;
    }
    return this.currentValue();
}

const _SpriteGauge_gaugeColor1 = Sprite_Gauge.prototype.gaugeColor1;
Sprite_Gauge.prototype.gaugeColor1 = function() {
    if ('hp' == this._statusType && this._battler && this._battler.isDying()) {
        return config.gaugeColorHpCrisis1 || '#FFFFFF';
    }
    if ('hp' == this._statusType) {
        return config.gaugeColorHp1 || '#FFFFFF';
    }
    if ('mp' == this._statusType) {
        return config.gaugeColorMp1 || '#FFFFFF';
    }
    if ('tp' == this._statusType) {
        return config.gaugeColorTp1 || '#FFFFFF';
    }
    if ('time' == this._statusType) {
        return config.gaugeColorAtb1 || '#FFFFFF';
    }
    if ('exp' == this._statusType && this._battler && this._battler.isMaxLevel()) {
        return config.gaugeColorExpMaxed1 || '#FFC107';
    }
    if ('exp' == this._statusType) {
        return config.gaugeColorExp1 || '#888888';
    }
    if ('custom' == this._statusType) {
        return config.gaugeColorCustom1 || '#888888';
    }
    return _SpriteGauge_gaugeColor1.call(this);
}

const _SpriteGauge_gaugeColor2 = Sprite_Gauge.prototype.gaugeColor2;
Sprite_Gauge.prototype.gaugeColor2 = function() {
    if ('hp' == this._statusType && this._battler && this._battler.isDying()) {
        return config.gaugeColorHpCrisis2 || '#FFFFFF';
    }
    if ('hp' == this._statusType && this._battler && this._battler.isDead()) {
        return config.gaugeColorHpDead2 || '#FFFFFF';
    }
    if ('hp' == this._statusType) {
        return config.gaugeColorHp2 || '#FFFFFF';
    }
    if ('mp' == this._statusType) {
        return config.gaugeColorMp2 || '#FFFFFF';
    }
    if ('tp' == this._statusType) {
        return config.gaugeColorTp2 || '#FFFFFF';
    }
    if ('time' == this._statusType) {
        return config.gaugeColorAtb2 || '#FFFFFF';
    }
    if ('exp' == this._statusType && this._battler && this._battler.isMaxLevel()) {
        return config.gaugeColorExpMaxed2 || '#FFC107';
    }
    if ('exp' == this._statusType) {
        return config.gaugeColorExp2 || '#888888';
    }
    if ('custom' == this._statusType) {
        return config.gaugeColorCustom2 || '#888888';
    }
    return _SpriteGauge_gaugeColor2.call(this);
}

const _SpriteGauge_gaugeBackColor = Sprite_Gauge.prototype.gaugeBackColor;
Sprite_Gauge.prototype.gaugeBackColor = function() {
    if ('hp' == this._statusType && this._battler && this._battler.isDying()) {
        return config.gaugeBackgroundColorHpCrisis || '#222222';
    }
    if ('hp' == this._statusType && this._battler && this._battler.isDead()) {
        return config.gaugeBackgroundColorHpDead || '#222222';
    }
    if ('hp' == this._statusType) {
        return config.gaugeBackgroundColorHp || '#222222';
    }
    if ('mp' == this._statusType) {
        return config.gaugeBackgroundColorMp || '#222222';
    }
    if ('tp' == this._statusType) {
        return config.gaugeBackgroundColorTp || '#222222';
    }
    if ('time' == this._statusType) {
        return config.gaugeBackgroundColorAtb || '#222222';
    }
    if ('exp' == this._statusType && this._battler && this._battler.isMaxLevel()) {
        return config.gaugeBackgroundColorExpMaxed || '#222222';
    }
    if ('exp' == this._statusType) {
        return config.gaugeBackgroundColorExp || '#222222';
    }
    if ('custom' == this._statusType) {
        return config.gaugeBackgroundColorCustom || '#222222';
    }
    return _SpriteGauge_gaugeBackColor.call(this);
}

const _SpriteGauge_labelColor = Sprite_Gauge.prototype.labelColor;
Sprite_Gauge.prototype.labelColor = function() {
    if ('hp' == this._statusType) {
        return config.hpLabelTextColor !== undefined
            ? ColorManager.textColor(config.hpLabelTextColor)
            : ColorManager.systemColor();
    }
    if ('mp' == this._statusType) {
        return config.mpLabelTextColor !== undefined
            ? ColorManager.textColor(config.mpLabelTextColor)
            : ColorManager.systemColor();
    }
    if ('tp' == this._statusType) {
        return config.tpLabelTextColor !== undefined
            ? ColorManager.textColor(config.tpLabelTextColor)
            : ColorManager.systemColor();
    }
    if ('custom' == this._statusType) {
        return config.customParameterLabelTextColor !== undefined
            ? ColorManager.textColor(config.customParameterLabelTextColor)
            : ColorManager.systemColor();
    }
    return _SpriteGauge_labelColor.call(this);
}

const _SpriteGauge_valueColor = Sprite_Gauge.prototype.valueColor;
Sprite_Gauge.prototype.valueColor = function() {
    if ('hp' == this._statusType) {
        return ColorManager.hpColor(this._battler);
    }
    if ('mp' == this._statusType) {
        return ColorManager.mpColor(this._battler);
    }
    if ('tp' == this._statusType) {
        return ColorManager.tpColor(this._battler);
    }
    if ('custom' == this._statusType && this.currentValue()) {
        return ColorManager.textColor(config.customParameterTextColor || 0);
    }
    if ('custom' == this._statusType) {
        return ColorManager.textColor(config.customParameterWhenEmptyTextColor || 0);
    }
    return _SpriteGauge_valueColor.call(this);
}

Sprite_Gauge.prototype.maxValueColor = function() {
    if ('hp' == this._statusType) {
        return ColorManager.textColor(config.hpValuesTextColor || 0);
    }
    if ('mp' == this._statusType) {
        return ColorManager.textColor(config.mpValuesTextColor || 0);
    }
    if ('custom' == this._statusType) {
        return ColorManager.textColor(config.customParameterTextColor || 0);
    }

    return this.valueColor();
}

const _SpriteGauge_valueFontSize = Sprite_Gauge.prototype.valueFontSize;
Sprite_Gauge.prototype.valueFontSize = function() {
    if (this.shouldDisplayMaxValue()) {
        
        let fontSize = _SpriteGauge_valueFontSize.call(this);
        for (; fontSize > 0; fontSize = fontSize - 2) {
            this.bitmap.fontSize = fontSize;

            const textWidth = this.bitmap.measureTextWidth('9999');
            const slashWidth = this.bitmap.measureTextWidth(' / ');
            
            if (2 * textWidth + slashWidth < this.bitmapWidth() - 30) {
                return fontSize;
            }
        }
    }
    return _SpriteGauge_valueFontSize.call(this);
}

Sprite_Gauge.prototype.shouldDisplayMaxValue = function() {
    if (this._statusType == 'custom') {
        return config.showCustomParameterGaugeMaxValues;
    }
    return config.showGaugeMaxValues && 'exp' != this._statusType;
}

} // Sprite_Gauge


// =====================================================================================
// Color Manager
// =====================================================================================

// Override
ColorManager.hpColor = function(actor) {
    if (actor && actor.isDead())    return this.deathColor();
    if (actor && actor.isDying())   return this.crisisColor();

    return this.textColor(config.hpValuesTextColor || 0);
}

// Override
ColorManager.crisisColor = function() {
    return this.textColor(config.hpCrisisTextColor || 17);
}

// Override
ColorManager.deathColor = function() {
    return this.textColor(config.hpDeadTextColor || 18);
}

// Override
ColorManager.mpColor = function(actor) {
    if (actor && !actor.mp && actor.mmp) {
        return this.textColor(config.mpEmptyTextColor || 0);
    }
    return this.textColor(config.mpValuesTextColor || 0);
}

// Override
ColorManager.tpColor = function(/*actor*/) {
    return this.textColor(config.tpValuesTextColor || 0);
}


// =====================================================================================
// Background Type & Frame
// =====================================================================================

const _WindowBase_initialize = Window_Base.prototype.initialize;
Window_Base.prototype.initialize = function() {
    _WindowBase_initialize.apply(this, arguments);

    this.updateBackgroundTypeIfNeeded();
    this.updateFrameVisibility();
}

const _WindowBase_update2 = Window_Base.prototype.update;
Window_Base.prototype.update = function() {
    _WindowBase_update2.call(this);

    this.updateBackgroundTypeIfNeeded();
    this.updateFrameVisibility();
}

Window_Base.prototype.updateBackgroundTypeIfNeeded = function() {
    if (this._mk_backgroundType !== this.getBackgroundType()) {
        this._mk_backgroundType = this.getBackgroundType();

        const type = this.getBackgroundType() || 'window';
    
        const backgroundType = ({
            'window'    : 0,
            'dimmed'    : 1,
            'none'      : 2,
            'image'     : 2,
            'gradient'  : 2,
        })[type];

        this.setBackgroundType(backgroundType || 0); // core function
    }
}

Window_Base.prototype.getBackgroundType = function() {
    return 'window'; // to be overridden
}

const _WindowBase_createContents = Window_Base.prototype.createContents;
Window_Base.prototype.createContents = function() {
    _WindowBase_createContents.call(this);

    this.createGradientBackground();
    this.createCustomBackground();
}

Window_Base.prototype.updateFrameVisibility = function() {
    if (this.isFrameVisible() !== undefined) {
        this.frameVisible = this.isFrameVisible();
    }
}

Window_Base.prototype.isFrameVisible = function() {
    return undefined; // to be overridden
}


// =====================================================================================
// Gradient Background
// =====================================================================================

Window_Base.prototype.createGradientBackground = function() {
    if ('gradient' == this.getBackgroundType()) {
        
        const bitmap = new Bitmap(this.width, this.height);
        bitmap.gradientFillRect(
            0,
            0,
            this.width,
            this.height,
            this.getBackgroundGradientColor1(),
            this.getBackgroundGradientColor2(),
        );
        
        this._customBackground = new Sprite(bitmap);
        this.addChildAt(this._customBackground, 0);
    }
}

Window_Base.prototype.getBackgroundGradientColor1 = function() {
    return getColor(0, 0, 0);
}

Window_Base.prototype.getBackgroundGradientColor2 = function() {
    return getColor(0, 0, 0, this.getBackOpacity() / 255);
}


// =====================================================================================
// Custom Background
// =====================================================================================

function Sprite_CustomBackground() {
    this.initialize(...arguments);
}

Sprite_CustomBackground.prototype = Object.create(Sprite.prototype);
Sprite_CustomBackground.prototype.constructor = Sprite_CustomBackground;

Sprite_CustomBackground.prototype.initialize = function(gameWindow) {
    this._gameWindow = gameWindow;

    Sprite.prototype.initialize.call(this, this.getBitmap());
}

Sprite_CustomBackground.prototype.update = function() {
    Sprite.prototype.update.call(this);

    this.visible = this.isVisible();
    this.updateBitmapIfNeeded();
    this.updateScale();
}

Sprite_CustomBackground.prototype.isVisible = function() {
    return (
        this.bitmap &&
        this._gameWindow.visible &&
        this._gameWindow.getBackgroundType() == 'image'
    );
}

Sprite_CustomBackground.prototype.updateBitmapIfNeeded = function() {
    if (this.bitmap != this.getBitmap()) {
        this.bitmap = this.getBitmap();
    }
}

Sprite_CustomBackground.prototype.updateScale = function() {
    if (this.bitmap) {
        this.scale.x = this._gameWindow.width / this.bitmap.width;
        this.scale.y = this._gameWindow.height / this.bitmap.height;
    }
}

Sprite_CustomBackground.prototype.getBitmap = function() {
    return ImageManager.loadBitmapFromFilepath(this._gameWindow.getBackgroundFile());
}

Window_Base.prototype.createCustomBackground = function() {
    const sprite = new Sprite_CustomBackground(this);
    this.addChildAt(sprite, 0);
}

Window_Base.prototype.getBackgroundFile = function() {
    // to be overridden
}


// =====================================================================================
// Back Opacity
// =====================================================================================

// Override
Window_Base.prototype.updateBackOpacity = function() {
    this.backOpacity = this.getBackOpacity();
}

Window_Base.prototype.getBackOpacity = function() {
    return typeof config.windowOpacity == 'number'
        ? config.windowOpacity
        : 'MZ' == Utils.RPGMAKER_NAME ? $gameSystem.windowOpacity() : 192;
}

// Override
Window_Base.prototype.refreshDimmerBitmap = function() {
    if (this._dimmerSprite) {
        const bitmap = this._dimmerSprite.bitmap;
        const w = this.width > 0 ? this.width + 8 : 0;
        const h = this.height;
        const m = this.padding;
        const c1 = getColor(0, 0, 0, this.getBackOpacity() / 255);
        const c2 = getColor(0, 0, 0, 0);
        bitmap.resize(w, h);
        bitmap.gradientFillRect(0, 0, w, m, c2, c1, true);
        bitmap.fillRect(0, m, w, h - m * 2, c1);
        bitmap.gradientFillRect(0, h - m, w, m, c1, c2, true);
        this._dimmerSprite.setFrame(0, 0, w, h);
    }
}


// =====================================================================================
// Window Skin
// =====================================================================================

const _WindowBase_loadWindowskin = Window_Base.prototype.loadWindowskin;
Window_Base.prototype.loadWindowskin = function() {
    
    if (this.shouldOverrideWindowSkin()) {
        const filepath = this.getWindowSkinFile() || 'window';
        const filename = Utils.extractFileName(filepath)
                            .replace('.png', '')
                            .replace('.PNG', '');
        
        this.windowskin = ImageManager.loadSystem(filename);
    } else {
        _WindowBase_loadWindowskin.call(this);
    }
}

Window_Base.prototype.shouldOverrideWindowSkin = function() {
    return false; // to be overridden
}

Window_Base.prototype.getWindowSkinFile = function() {
    return 'window'; // to be overridden
}


// =====================================================================================
// Font Settings
// =====================================================================================

// Override
Window_Base.prototype.makeFontBigger = function() {
    this._changeFontSizeByDelta(this.defaultFontSizeDelta());
}

// Override
Window_Base.prototype.makeFontSmaller = function() {
    this._changeFontSizeByDelta(-1 * this.defaultFontSizeDelta());
}

Window_Base.prototype._changeFontSizeByDelta = function(delta) {
    const nextFontSize = (this.contents.fontSize + delta).clamp(
                            this.minFontSize(),
                            this.maxFontSize(),
                        );

    if (nextFontSize != this.contents.fontSize) {
        this.contents.fontSize = nextFontSize;
    }
}

Window_Base.prototype.maxFontSize = function() {
    return 108;
}

Window_Base.prototype.minFontSize = function() {
    return 12;
}

Window_Base.prototype.defaultFontSizeDelta = function() {
    return typeof config.fontSizeDelta == 'number'
        ? config.fontSizeDelta
        : 12;
}

const _WindowBase_resetFontSettings = Window_Base.prototype.resetFontSettings;
Window_Base.prototype.resetFontSettings = function() {
    _WindowBase_resetFontSettings.call(this);

    this.contents.fontSize = this.getDefaultFontSize() || this.standardFontSize();
}

// Override
const _WindowBase_standardFontSize = Window_Base.prototype.standardFontSize;
Window_Base.prototype.standardFontSize = function() {
    if (config.fontSize) return config.fontSize;
    
    return 'MZ' == Utils.RPGMAKER_NAME
        ? $gameSystem.mainFontSize()
        : _WindowBase_standardFontSize.call(this);
}

Window_Base.prototype.getDefaultFontSize = function() {
    return Window_Base.prototype.standardFontSize.call(this); // to be overriden
}

Window_Base.prototype.setFontSize = function(fontSize) {
    this.contents.fontSize = fontSize || this.standardFontSize();
}

Window_Base.prototype.textHeightByFontSize = function(fontSize = 0) {
    return fontSize
        ? (fontSize / this.getDefaultFontSize()) * this.lineHeight()
        : this.lineHeight();
}

const _WindowBase_lineHeight = Window_Base.prototype.lineHeight;
Window_Base.prototype.lineHeight = function() {
    return this.efficientFontSizeFactor
        ? (config.windowLineHeight || _WindowBase_lineHeight.call(this)) * this.efficientFontSizeFactor()
        : (config.windowLineHeight || _WindowBase_lineHeight.call(this));
}

Window_Base.prototype.efficientFontSizeFactor = function() {
    if (!this.getDefaultFontSize()) {
        return 1; // no font size set, use default factor
    }
    return (
        this.getDefaultFontSize() /
        Window_Base.prototype.standardFontSize.call(this)
    );
}

// Override
Window_Base.prototype.drawIcon = function(iconIndex, x, y) {
    const bitmap    = ImageManager.loadSystem("IconSet");
    const pw        = ImageManager.iconWidth;
    const ph        = ImageManager.iconHeight;
    const sx        = (iconIndex % 16) * pw;
    const sy        = Math.floor(iconIndex / 16) * ph;
    const factor    = this.efficientFontSizeFactor();

    this.contents.blt(
        bitmap,
        sx,
        sy,
        pw,
        ph,
        x, // + (pw - pw * factor) / 2,
        y + (ph - ph * factor) / 2,
        pw * factor,
        ph * factor,
    );
}


// =====================================================================================
// Dash Animation
// =====================================================================================

Object.defineProperty(Window_Base.prototype, 'dash', {
    get: function() {
        return this._dash || 0;
    },
    set: function(value) {
        this._dash = value;
    }
});

const _WindowBase_show = Window_Base.prototype.show;
Window_Base.prototype.show = function() {
    _WindowBase_show.call(this);
    
    this.dash = 0;
}

const _WindowBase_hide = Window_Base.prototype.hide;
Window_Base.prototype.hide = function() {
    _WindowBase_hide.call(this);
    
    this.dash = 0;
}

const _WindowBase_open = Window_Base.prototype.open;
Window_Base.prototype.open = function() {
    _WindowBase_open.call(this);
    
    this.dash = 0;
}

const _WindowBase_close = Window_Base.prototype.close;
Window_Base.prototype.close = function() {
    _WindowBase_close.call(this);
    
    this.dash = 0;
}

const _WindowBase_update = Window_Base.prototype.update;
Window_Base.prototype.update = function() {
    _WindowBase_update.call(this);
    
    if (this.dash < 60) {
        this.dash++;
    }
}


// =====================================================================================
// Window Selectable
// =====================================================================================

const _WindowSelectable_drawItemBackground = Window_Selectable.prototype.drawItemBackground;
Window_Selectable.prototype.drawItemBackground = function(index) {
    switch (this.getItemBackgroundType()) {
        case 'image':   this.createCustomItemBackground(index);                     break;
        case 'none':    break;
        default:        _WindowSelectable_drawItemBackground.call(this, index);     break;
    }
}

Window_Selectable.prototype.getItemBackgroundType = function() {
    return 'default'; // to be overidden
}

Window_Selectable.prototype.getItemBackgroundFile = function() {
    // to be overidden
}

Window_Selectable.prototype.createCustomItemBackground = function(index) {
    const bitmap = ImageManager.loadBitmapFromFilepath(this.getItemBackgroundFile());

    bitmap && bitmap.addLoadListener(() => {
        this.contents.blt(
            bitmap,
            0,
            0,
            bitmap.width,
            bitmap.height,
            this.itemRect(index).x,
            this.itemRect(index).y,
            this.itemRect(index).width,
            this.itemRect(index).height,
        );
    });
}


// =====================================================================================
// Command Window
// =====================================================================================

Window_MenuCommand.prototype.shouldOverrideWindowSkin = function() {
    return config.overrideCommandWindow;
}

Window_MenuCommand.prototype.getWindowSkinFile = function() {
    return config.commandWindowFile;
}

Window_MenuCommand.prototype.getBackgroundType = function() {
    return config.commandBackgroundType || 'window';
}

Window_MenuCommand.prototype.getBackgroundFile = function() {
    return config.commandBackgroundFile;
}

Window_MenuCommand.prototype.iconTextStyle = function() {
    return config.commandStyle || 'both';
}

Window_MenuCommand.prototype.commandIcon = function(index) {
    const command = menuCommands.find(command => command.symbol == this.commandSymbol(index));
    return command ? command.iconIndex : 0;
}

Window_MenuCommand.prototype.getItemBackgroundType = function() {
    return config.commandItemBackgroundType;
}

Window_MenuCommand.prototype.getItemBackgroundFile = function() {
    return config.commandItemBackgroundFile;
}

const _WindowMenuCommand_updateBackOpacity = Window_MenuCommand.prototype.updateBackOpacity;
Window_MenuCommand.prototype.updateBackOpacity = function() {
    if (config.commandOpacity >= 0) {
        this.backOpacity = config.commandOpacity;
    } else {
        _WindowMenuCommand_updateBackOpacity.call(this);
    }
}

Window_MenuCommand.prototype.getBackOpacity = function() {
    return typeof config.commandOpacity == 'number'
        ? config.commandOpacity
        : Window_Base.prototype.getBackOpacity.call(this);
}

const _WindowMenuCommand_itemHeight = Window_MenuCommand.prototype.itemHeight;
Window_MenuCommand.prototype.itemHeight = function() {
    return config.commandItemHeight || _WindowMenuCommand_itemHeight.call(this);
}

const _WindowMenuCommand_rowSpacing = Window_MenuCommand.prototype.rowSpacing;
Window_MenuCommand.prototype.rowSpacing = function() {
    return config.commandRowSpacing >= 0
        ? config.commandRowSpacing
        : _WindowMenuCommand_rowSpacing.call(this);
}

const _WindowMenuCommand_colSpacing = Window_MenuCommand.prototype.colSpacing;
Window_MenuCommand.prototype.colSpacing = function() {
    return config.commandColumnSpacing >= 0
        ? config.commandColumnSpacing
        : _WindowMenuCommand_colSpacing.call(this);
}

Window_MenuCommand.prototype.itemTextAlign = function() {
    return config.commandTextAlign || 'left';
}

Window_MenuCommand.prototype.getDefaultFontSize = function() {
    return config.commandFontSize;
}


// =====================================================================================
// Game Info Window
// =====================================================================================

function Window_GameInfo() {
    this.initialize(...arguments);
}

Window_GameInfo.prototype = Object.create(Window_Selectable.prototype);
Window_GameInfo.prototype.constructor = Window_GameInfo;

Window_GameInfo.prototype.getBackgroundType = function() {
    return config.goldBackgroundType;
}

Window_GameInfo.prototype.getBackgroundFile = function() {
    return config.goldBackgroundFile;
}

Window_GameInfo.prototype.update = function() {
    Window_Selectable.prototype.update.call(this);

    if (this.requiresRefresh()) {
        this._lastPlaytimeText = $gameSystem.playtimeText();
        this._lastGold = $gameParty.gold();

        this.refresh();
    }
}

Window_GameInfo.prototype.requiresRefresh = function() {
    const showPlaytime = (
        (config.gameInfoTextLeft && config.gameInfoTextLeft.includes('\\PT')) ||
        (config.gameInfoTextRight && config.gameInfoTextRight.includes('\\PT'))
    );
    return (
        (showPlaytime && this._lastPlaytimeText != $gameSystem.playtimeText()) ||
        (this._lastGold != $gameParty.gold())
    );
}

Window_GameInfo.prototype.refresh = function() {
    this.contents && this.contents.clear();

    this.drawAllItems();
}

Window_GameInfo.prototype.maxItems = function() {
    return Math.max(
        config.gameInfoTextLeft ? config.gameInfoTextLeft.split('\n').length : 0,
        config.gameInfoTextRight ? config.gameInfoTextRight.split('\n').length : 0,
    );
}

Window_GameInfo.prototype.maxPageItems = Window_GameInfo.prototype.maxItems;

Window_GameInfo.prototype.drawItemBackground = function(/*index*/) {
    // do nothing
}

Window_GameInfo.prototype.drawItem = function(index) {
    const rectangle = this.itemLineRect(index);
    const textLeft  = this.getTextLeft(index);
    const textRight = this.getTextRight(index);

    textLeft && this.drawTextEx(
        textLeft,
        rectangle.x,
        rectangle.y + rectangle.height - this.textSizeEx(textLeft).height,
        rectangle.width,
    );

    textRight && this.drawTextEx(
        textRight,
        rectangle.width - this.textSizeEx(textRight).width + rectangle.x,
        rectangle.y + rectangle.height - this.textSizeEx(textRight).height,
        rectangle.width,
    );
}

Window_GameInfo.prototype.getTextLeft = function(index) {
    return config.gameInfoTextLeft && config.gameInfoTextLeft.split('\n')[index];
}

Window_GameInfo.prototype.getTextRight = function(index) {
    return config.gameInfoTextRight && config.gameInfoTextRight.split('\n')[index];
}

Window_GameInfo.prototype.maxCols = function() {
    return ['top', 'bottom'].includes(config.commandOrientation) || 'none' == config.statusOrientation
        ? gameInfoWindowNumberOfLines()
        : 1;
}

Window_GameInfo.prototype.getDefaultFontSize = function() {
    return config.goldFontSize;
}

// Custom Text Codes
Window_GameInfo.prototype.convertEscapeCharacters = function(text) {
    text = text.replace('\\$', $gameParty.gold());
    text = text.replace('\\MN', mapDisplayName() || config.unknownMapName || 'Unknown Region');
    text = text.replace('\\PT', playtimeText());
    
    return Window_Base.prototype.convertEscapeCharacters.call(this, text);
}

const mapDisplayName = () => silentTryCatch(() => $gameMap.displayName()) || '';
const playtimeText = () => silentTryCatch(() => $gameSystem.playtimeText()) || '';

function silentTryCatch(f) {
    try {
        return f();
    } catch (e) {
        return null;
    }
}

// Stretch Icons according to Font Size
Window_GameInfo.prototype.processDrawIcon = function(iconIndex, textState) {
    const factor = this.efficientFontSizeFactor();

    if ('MZ' == Utils.RPGMAKER_NAME) {
        const deltaX = (ImageManager.standardIconWidth - ImageManager.iconWidth) * factor;
        const deltaY = (ImageManager.standardIconHeight - ImageManager.iconHeight) * factor;
    
        if (textState.drawing) {
            const x = textState.x + deltaX / 2 + 2;
            const y = textState.y + deltaY / 2 + 2;
            this.drawIcon(iconIndex, x, y, factor);
        }
        textState.x += ImageManager.standardIconWidth * factor + 4;
    }
    
    if ('MV' == Utils.RPGMAKER_NAME) {
        this.drawIcon(iconIndex, textState.x + 2, textState.y + 2, factor);
        textState.x += ImageManager.iconWidth * factor + 4;
    }
}

Window_GameInfo.prototype.drawIcon = function(iconIndex, x, y, factor = 1) {
    if (iconIndex) {   
        const bitmap = ImageManager.loadSystem("IconSet");
        const pw = ImageManager.iconWidth || this._iconWidth;
        const ph = ImageManager.iconHeight || this._iconHeight;
        const sx = (iconIndex % 16) * pw;
        const sy = Math.floor(iconIndex / 16) * ph;
        
        this.contents.blt(
            bitmap,
            sx,
            sy,
            pw,
            ph,
            x,
            y,
            pw * factor,
            ph * factor,
        );
    }
}

// =====================================================================================
// (No) Touch UI
// =====================================================================================

if ('MZ' == Utils.RPGMAKER_NAME) {

function isNoTouchUI() {
    return (
        'never' == config.showTouchUIMode ||
        ('onMobile' == config.showTouchUIMode && !Utils.isMobileDevice())
    );
}

function isRemoveTouchUIArea() {
    return isNoTouchUI() && !config.keepTouchUISpace;
}

const _SceneMenuBase_mainAreaHeight = Scene_MenuBase.prototype.mainAreaHeight;
Scene_MenuBase.prototype.mainAreaHeight = function() {
    return isRemoveTouchUIArea()
        ? Graphics.boxHeight - this.helpAreaHeight()
        : _SceneMenuBase_mainAreaHeight.call(this);
}

const _SceneMenuBase_mainAreaTop = Scene_MenuBase.prototype.mainAreaTop;
Scene_MenuBase.prototype.mainAreaTop = function() {
    return isRemoveTouchUIArea()
        ? (this.isBottomHelpMode() ? 0 : this.helpAreaHeight())
        : _SceneMenuBase_mainAreaTop.call(this);
}

const _SceneMenuBase_helpAreaTop = Scene_MenuBase.prototype.helpAreaTop;
Scene_MenuBase.prototype.helpAreaTop = function() {
    return isRemoveTouchUIArea()
        ? (this.isBottomHelpMode() ? this.mainAreaHeight() : 0)
        : _SceneMenuBase_helpAreaTop.call(this);
}

const _WindowOptions_addGeneralOptions = Window_Options.prototype.addGeneralOptions;
Window_Options.prototype.addGeneralOptions = function() {
    _WindowOptions_addGeneralOptions.call(this);

    if (isNoTouchUI()) this.mk_removeCommand('touchUI');
}

Window_Selectable.prototype.mk_removeCommand = function(symbol) {
    const index = this.findSymbol(symbol);
    if (index >= 0) this._list.splice(index, 1);
}

const _SceneOptions_maxCommands = Scene_Options.prototype.maxCommands;
Scene_Options.prototype.maxCommands = function() {
    return _SceneOptions_maxCommands.call(this) - (isNoTouchUI() ? 1 : 0);
}

const _SceneBase_create = Scene_Base.prototype.create;
Scene_Base.prototype.create = function() {
    _SceneBase_create.call(this);

    if (isNoTouchUI() && typeof(ConfigManager) !== 'undefined') {
        ConfigManager.touchUI = false;
    }
}

const _SceneBase_buttonAreaHeight = Scene_Base.prototype.buttonAreaHeight;
Scene_Base.prototype.buttonAreaHeight = function() {
    return config.touchUIAreaHeight !== undefined
        ? config.touchUIAreaHeight
        : _SceneBase_buttonAreaHeight.call(this);
}

} // MZ


// =====================================================================================
// Skip Actor Selection
// =====================================================================================

const _SceneMenu_commandPersonal = Scene_Menu.prototype.commandPersonal;
Scene_Menu.prototype.commandPersonal = function() {
    if (skipActorSelection()) {
        this._statusWindow.select(0);
        this.onPersonalOk();
    } else {
        _SceneMenu_commandPersonal.call(this);
    }
}

function skipActorSelection() {
    return (
        ('true' == params.skipActorSelection && $gameParty.members().length == 1) ||
        'none' == config.statusOrientation
    );
}


// =====================================================================================
// Menu Commands
// =====================================================================================

if (overrideMenuCommands) {
    
    const _SceneMenu_createCommandWindow = Scene_Menu.prototype.createCommandWindow;
    Scene_Menu.prototype.createCommandWindow = function() {
        _SceneMenu_createCommandWindow.call(this);

        menuCommands.forEach(command => {
            const handler = this.makeHandler(command);
            this._commandWindow.setHandler(command.symbol, handler);
        });
    }

    Scene_Menu.prototype.makeHandler = function(command) {
        return command.isPersonal
            ? this.commandPersonal.bind(this)
            : this.makeAction(command).bind(this);
    }

    Scene_Menu.prototype.makeAction = function(command) {

        switch (command.action) {
            case 'Jump to...':
                if (!command.destination) {
                    reject('In Menu Command "%1", you forgot to enter a Scene to jump to.'.format(command.text));
                }
                return () => eval('SceneManager.push(%1)'.format(command.destination));
            
            case 'Formation Mode':
                return this.commandFormation.bind(this);
            
            case 'Common Event':
                return () => {
                    $gameTemp.reserveCommonEvent(command.commonEventId);
                    this.popScene();
                };
            
            case 'Custom Code':
                return () => {
                    this._commandWindow.activate();
                    command.actionCustomCode && command.actionCustomCode();
                }
        }
    }

    // Override
    Window_MenuCommand.prototype.makeCommandList = function() {
        menuCommands
            .filter(command => isMenuCommandConditionMet(command.showCondition))
            .forEach(({text, symbol, enableCondition}) => this.addCommand(
                text,
                symbol,
                isMenuCommandConditionMet(enableCondition)),
            );
    }

    // Override
    Scene_Menu.prototype.onPersonalOk = function() {
        const selectedSymbol    = this._commandWindow.currentSymbol();
        const command           = menuCommands.find(command => command.symbol == selectedSymbol);
        const action            = this.makeAction(command);
        
        action && action.call(this);
    }

    function isMenuCommandConditionMet(condition) {
        if (!condition) return true;

        return [
            !condition.switchId || $gameSwitches.value(condition.switchId),
                !condition.misc ||
                '_' == condition.misc ||
                ('at least 1 Party Member?' == condition.misc && $gameParty.exists()) ||
                ('is Formation allowed?' == condition.misc && $gameParty.size() >= 2 && $gameSystem.isFormationEnabled()) ||
                ('is Save allowed?' == condition.misc && !DataManager.isEventTest() && $gameSystem.isSaveEnabled())
            ,
            !condition.pluginName || $plugins.find(plugin => plugin && plugin.status && plugin.name == condition.pluginName),
            'true' !== condition.requireSaveEnabled || $gameSwitches.isSaveEnabled(),
            !condition.customEval || silentTryCatch(() => eval(condition.customEval)),
        ]
        .every(Boolean);
    }

}


// =====================================================================================
// Custom Parameter
// =====================================================================================

const _WindowMenuStatus_drawItem = Window_MenuStatus.prototype.drawItem;
Window_MenuStatus.prototype.drawItem = function(index) {
    _WindowMenuStatus_drawItem.call(this, index);

    const b = (
        config.enableCustomParameter && (
            isScene(Scene_Menu) || config.showCustomParameterInOtherScenes
    ));

    if (b) this.drawActorCustomParameter(index);
}

Window_MenuStatus.prototype.drawActorCustomParameter = function(index) {
    const actor     = this.actor(index);
    const mode      = config.customParameterMode || ('MZ' == Utils.RPGMAKER_NAME ? 'gauge' : 'x-y');
    const boxWidth  = this.customParameterBoxWidth(mode);
    const boxHeight = this.customParameterBoxHeight(mode);

    const pos = getTextPos(
        this,
        index,
        boxWidth,
        boxHeight,
        config.customParameterHorzAlign || 'center',
        config.customParameterVertAlign || 'middle',
        config.customParameterOffsetX,
        config.customParameterOffsetY,
    );

    if (!precheckCustomParametersNoError(actor, mode)) {
        this.drawText("ERROR", pos.x, pos.y);
    }
    else if (checkCustomParameterReturnsTruthy(actor)) {
        this._drawActorCustomParameter(actor, mode, pos, boxWidth);
    }
}

Window_MenuStatus.prototype._drawActorCustomParameter = function(actor, mode, pos, boxWidth) {
    if ('gauge' == mode && 'MZ' == Utils.RPGMAKER_NAME) {
        this.placeGauge(actor, 'custom', pos.x, pos.y);
    }
    if ('gauge' == mode && 'MV' == Utils.RPGMAKER_NAME) {
        // not supported
    }
    if ('x-y' == mode) {
        this.drawActorCustomParameterAsXY(actor, pos.x, pos.y, boxWidth);
    }
    if ('number' == mode) {
        this.drawActorCustomParameterAsNumber(actor, pos.x, pos.y, boxWidth);
    }
    if ('text' == mode) {
        this.drawActorCustomParameterAsText(actor, pos.x, pos.y, boxWidth);
    }
}

Window_MenuStatus.prototype.customParameterBoxWidth = function(mode) {
    if (config.customParameterWidth) {
        return config.customParameterWidth;
    }
    if ('gauge' == mode && 'MZ' == Utils.RPGMAKER_NAME) {
        return new Sprite_Gauge().width;
    }
    return this.textWidth('HP  9999 / 9999');
}

Window_MenuStatus.prototype.customParameterBoxHeight = function(mode) {
    if ('gauge' == mode && 'MZ' == Utils.RPGMAKER_NAME) {
        return config.customParameterHeight || new Sprite_Gauge().height;
    }
    return this.lineHeight();
}

Window_MenuStatus.prototype.drawActorCustomParameterAsXY = function(actor, x, y, width) {
    this.setFontSize(config.customParameterFontSize);
    this.changeTextColor(ColorManager.textColor(config.customParameterLabelTextColor !== undefined
        ? config.customParameterLabelTextColor
        : 16
    ));
    this.drawText(config.customParameterLabel || '', x, y, width);

    const current   = silentTryCatch(() => eval(config.customParameterCurrentValueEval)) || 0;
    const max       = silentTryCatch(() => eval(config.customParameterMaxValueEval)) || 0;

    this.drawCurrentAndMax(
        current,
        max,
        x + this.textWidth(config.customParameterLabel || ''),
        y,
        width - this.textWidth(config.customParameterLabel || ''),
        ColorManager.textColor(customParameterCurrentValueTextColorCode(actor)),
        ColorManager.textColor(config.customParameterTextColor || 0),
    );
    this.resetTextColor();
    this.resetFontSettings();
}

Window_MenuStatus.prototype.drawActorCustomParameterAsNumber = function(actor, x, y, width) {
    const label             = config.customParameterLabel || '';
    const labelColorCode    = config.customParameterLabelTextColor !== undefined ? config.customParameterLabelTextColor : 16;
    const value             = silentTryCatch(() => eval(config.customParameterNumberEval)) || 0;
    const textColor         = value
                                ? config.customParameterTextColor || 0
                                : config.customParameterWhenEmptyTextColor || 0;

    this.setFontSize(config.customParameterFontSize);
    this.changeTextColor(ColorManager.textColor(labelColorCode));
    
    this.drawText(
        label,
        x,
        y,
        width,
    );

    this.changeTextColor(ColorManager.textColor(textColor));

    this.drawText(
        value,
        x + this.textWidth(label),
        y,
        width - this.textWidth(label),
        'right',
    );
    this.resetTextColor();
    this.resetFontSettings();
}

Window_MenuStatus.prototype.drawActorCustomParameterAsText = function(actor, x, y, width) {
    this.setFontSize(config.customParameterFontSize);
    
    const text          = silentTryCatch(() => eval(config.customParameterTextEval)) || '';
    const textColor     = config.customParameterTextColor || 0;
    const textAlign     = config.customParameterTextAlign || 'left';
    const textWidth     = this.textSizeEx(text).width;

    let x2;
    if ('left' == textAlign)    x2 = x;
    if ('center' == textAlign)  x2 = x + width / 2 - textWidth / 2;
    if ('right' == textAlign)   x2 = x + width - textWidth;

    this.drawTextEx(
        (textColor ? '\\C[%1]'.format(textColor) : '') + text,
        x2,
        y,
        width,
    );
    this.resetTextColor();
    this.resetFontSettings();
}

function checkCustomParameterReturnsTruthy(actor) {
    return (
        !config.customParameterPreconditionEval ||
        silentTryCatch(() => eval(config.customParameterPreconditionEval))
    );
}

function precheckCustomParametersNoError(actor, mode) {
    const evalsToCheck = [ ];
    evalsToCheck.push(config.customParameterPreconditionEval);

    if ('gauge' == mode || 'x-y' == mode)   evalsToCheck.push(config.customParameterCurrentValueEval);
    if ('gauge' == mode || 'x-y' == mode)   evalsToCheck.push(config.customParameterMaxValueEval);
    if ('number' == mode)                   evalsToCheck.push(config.customParameterNumberEval);
    if ('text' == mode)                     evalsToCheck.push(config.customParameterTextEval);

    return evalsToCheck
        .filter(Boolean)
        .every(evalString => checkNoError(() => eval(evalString)));
}

function checkNoError(f) {
    try {
        f();
        return true;
    } catch (e) {
        return false;
    }
}

function customParameterCurrentValueTextColorCode(actor) {
    const result = silentTryCatch(() => eval(config.customParameterCurrentValueEval)) || 0;
    return result
        ? config.customParameterTextColor || 0
        : config.customParameterWhenEmptyTextColor || 0;
}


// =====================================================================================
// Plugin Commands
// =====================================================================================

if (PluginManager.registerCommand) {

    PluginManager.registerCommand(PLUGIN_NAME, 'setMenuPortrait', args => {
        const actor = $gameActors.actor(Number(args.actorId));

        actor && actor.setMenuPortrait(args.pictureName);
    });

    PluginManager.registerCommand(PLUGIN_NAME, 'resetMenuPortrait', args => {
        const actor = $gameActors.actor(Number(args.actorId));

        actor && actor.resetMenuPortrait();
    });
}


// =====================================================================================
// Compatibility
// =====================================================================================

const _SceneBoot_start = Scene_Boot.prototype.start;
Scene_Boot.prototype.start = function() {
    _SceneBoot_start.call(this);

    Scene_Menu.prototype.setCoreEngineUpdateWindowBg = function() {
        // nothing to do
    }

}


})();
